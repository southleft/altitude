{"version":3,"file":"icon-svgs-icon-svgs-stories.dc88550f.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAmDA;;;;AAKA;;;;;;;;ACPA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA","sources":["webpack://al-web-components/./.storybook/components/icon-svgs/icon-svgs.ts","webpack://al-web-components/./components/icon/icons/add.ts","webpack://al-web-components/./components/icon/icons/attachment.ts","webpack://al-web-components/./components/icon/icons/bookmark.ts","webpack://al-web-components/./components/icon/icons/chevron-down.ts","webpack://al-web-components/./components/icon/icons/chevron-left.ts","webpack://al-web-components/./components/icon/icons/chevron-right.ts","webpack://al-web-components/./components/icon/icons/clock.ts","webpack://al-web-components/./components/icon/icons/document.ts","webpack://al-web-components/./components/icon/icons/dots-horizontal.ts","webpack://al-web-components/./components/icon/icons/dots-vertical.ts","webpack://al-web-components/./components/icon/icons/emoji.ts","webpack://al-web-components/./components/icon/icons/filter.ts","webpack://al-web-components/./components/icon/icons/layout-masonry.ts","webpack://al-web-components/./components/icon/icons/menu.ts","webpack://al-web-components/./components/icon/icons/minus.ts","webpack://al-web-components/./components/icon/icons/pin.ts","webpack://al-web-components/./components/icon/icons/search.ts","webpack://al-web-components/./components/icon/icons/send.ts","webpack://al-web-components/./components/icon/icons/sign-in.ts","webpack://al-web-components/./components/icon/icons/star.ts"],"sourcesContent":[null,"import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Add from '../svgs/add.svg';\n\n/**\n * Icon: al-icon-add\n */\nexport class ALIconAdd extends ALElement {\n  static el = 'al-icon-add';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Add}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconAdd.el) === undefined) {\n  customElements.define(ALIconAdd.el, ALIconAdd);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-add': ALIconAdd;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Attachment from '../svgs/attachment.svg';\n\n/**\n * Icon: al-icon-attachment\n */\nexport class ALIconAttachment extends ALElement {\n  static el = 'al-icon-attachment';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Attachment}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconAttachment.el) === undefined) {\n  customElements.define(ALIconAttachment.el, ALIconAttachment);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-attachment': ALIconAttachment;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Bookmark from '../svgs/bookmark.svg';\n\n/**\n * Icon: al-icon-bookmark\n */\nexport class ALIconBookmark extends ALElement {\n  static el = 'al-icon-bookmark';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Bookmark}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconBookmark.el) === undefined) {\n  customElements.define(ALIconBookmark.el, ALIconBookmark);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-bookmark': ALIconBookmark;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport ChevronDown from '../svgs/chevron-down.svg';\n\n/**\n * Icon: al-icon-chevron-down\n */\nexport class ALIconChevronDown extends ALElement {\n  static el = 'al-icon-chevron-down';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${ChevronDown}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconChevronDown.el) === undefined) {\n  customElements.define(ALIconChevronDown.el, ALIconChevronDown);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-chevron-down': ALIconChevronDown;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport ChevronLeft from '../svgs/chevron-left.svg';\n\n/**\n * Icon: al-icon-chevron-left\n */\nexport class ALIconChevronLeft extends ALElement {\n  static el = 'al-icon-chevron-left';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${ChevronLeft}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconChevronLeft.el) === undefined) {\n  customElements.define(ALIconChevronLeft.el, ALIconChevronLeft);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-chevron-left': ALIconChevronLeft;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport ChevronRight from '../svgs/chevron-right.svg';\n\n/**\n * Icon: al-icon-chevron-right\n */\nexport class ALIconChevronRight extends ALElement {\n  static el = 'al-icon-chevron-right';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${ChevronRight}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconChevronRight.el) === undefined) {\n  customElements.define(ALIconChevronRight.el, ALIconChevronRight);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-chevron-right': ALIconChevronRight;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Clock from '../svgs/clock.svg';\n\n/**\n * Icon: al-icon-clock\n */\nexport class ALIconClock extends ALElement {\n  static el = 'al-icon-clock';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Clock}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconClock.el) === undefined) {\n  customElements.define(ALIconClock.el, ALIconClock);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-clock': ALIconClock;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Document from '../svgs/document.svg';\n\n/**\n * Icon: al-icon-document\n */\nexport class ALIconDocument extends ALElement {\n  static el = 'al-icon-document';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Document}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconDocument.el) === undefined) {\n  customElements.define(ALIconDocument.el, ALIconDocument);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-document': ALIconDocument;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport DotsHorizontal from '../svgs/dots-horizontal.svg';\n\n/**\n * Icon: al-icon-dots-horizontal\n */\nexport class ALIconDotsHorizontal extends ALElement {\n  static el = 'al-icon-dots-horizontal';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${DotsHorizontal}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconDotsHorizontal.el) === undefined) {\n  customElements.define(ALIconDotsHorizontal.el, ALIconDotsHorizontal);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-dots-horizontal': ALIconDotsHorizontal;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport DotsVertical from '../svgs/dots-vertical.svg';\n\n/**\n * Icon: al-icon-dots-vertical\n */\nexport class ALIconDotsVertical extends ALElement {\n  static el = 'al-icon-dots-vertical';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${DotsVertical}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconDotsVertical.el) === undefined) {\n  customElements.define(ALIconDotsVertical.el, ALIconDotsVertical);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-dots-vertical': ALIconDotsVertical;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Emoji from '../svgs/emoji.svg';\n\n/**\n * Icon: al-icon-emoji\n */\nexport class ALIconEmoji extends ALElement {\n  static el = 'al-icon-emoji';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Emoji}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconEmoji.el) === undefined) {\n  customElements.define(ALIconEmoji.el, ALIconEmoji);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-emoji': ALIconEmoji;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Filter from '../svgs/filter.svg';\n\n/**\n * Icon: al-icon-filter\n */\nexport class ALIconFilter extends ALElement {\n  static el = 'al-icon-filter';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Filter}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconFilter.el) === undefined) {\n  customElements.define(ALIconFilter.el, ALIconFilter);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-filter': ALIconFilter;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport LayoutMasonry from '../svgs/layout-masonry.svg';\n\n/**\n * Icon: al-icon-layout-masonry\n */\nexport class ALIconLayoutMasonry extends ALElement {\n  static el = 'al-icon-layout-masonry';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${LayoutMasonry}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconLayoutMasonry.el) === undefined) {\n  customElements.define(ALIconLayoutMasonry.el, ALIconLayoutMasonry);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-layout-masonry': ALIconLayoutMasonry;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Menu from '../svgs/menu.svg';\n\n/**\n * Icon: al-icon-menu\n */\nexport class ALIconMenu extends ALElement {\n  static el = 'al-icon-menu';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Menu}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconMenu.el) === undefined) {\n  customElements.define(ALIconMenu.el, ALIconMenu);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-menu': ALIconMenu;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Minus from '../svgs/minus.svg';\n\n/**\n * Icon: al-icon-minus\n */\nexport class ALIconMinus extends ALElement {\n  static el = 'al-icon-minus';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Minus}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconMinus.el) === undefined) {\n  customElements.define(ALIconMinus.el, ALIconMinus);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-minus': ALIconMinus;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Pin from '../svgs/pin.svg';\n\n/**\n * Icon: al-icon-pin\n */\nexport class ALIconPin extends ALElement {\n  static el = 'al-icon-pin';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Pin}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconPin.el) === undefined) {\n  customElements.define(ALIconPin.el, ALIconPin);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-pin': ALIconPin;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Search from '../svgs/search.svg';\n\n/**\n * Icon: al-icon-search\n */\nexport class ALIconSearch extends ALElement {\n  static el = 'al-icon-search';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Search}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconSearch.el) === undefined) {\n  customElements.define(ALIconSearch.el, ALIconSearch);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-search': ALIconSearch;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Send from '../svgs/send.svg';\n\n/**\n * Icon: al-icon-send\n */\nexport class ALIconSend extends ALElement {\n  static el = 'al-icon-send';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Send}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconSend.el) === undefined) {\n  customElements.define(ALIconSend.el, ALIconSend);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-send': ALIconSend;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport SignIn from '../svgs/sign-in.svg';\n\n/**\n * Icon: al-icon-sign-in\n */\nexport class ALIconSignIn extends ALElement {\n  static el = 'al-icon-sign-in';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${SignIn}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconSignIn.el) === undefined) {\n  customElements.define(ALIconSignIn.el, ALIconSignIn);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-sign-in': ALIconSignIn;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Star from '../svgs/star.svg';\n\n/**\n * Icon: al-icon-star\n */\nexport class ALIconStar extends ALElement {\n  static el = 'al-icon-star';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Star}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconStar.el) === undefined) {\n  customElements.define(ALIconStar.el, ALIconStar);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-star': ALIconStar;\n  }\n}\n"],"names":[],"sourceRoot":""}