{"version":3,"file":"header-header-stories.c4f69884.iframe.bundle.js","mappings":";;AAqBA;;;;AAKA;;;;;;;ACuBA;AACA;AACA;AACA;;AAEA;;AAGA","sources":["webpack://al-web-components/./components/header/header.stories.ts","webpack://al-web-components/./components/icon/icons/menu.ts"],"sourcesContent":[null,"import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ALElement } from '../../ALElement';\nimport styles from '../icon.scss';\nimport Menu from '../svgs/menu.svg';\n\n/**\n * Icon: al-icon-menu\n */\nexport class ALIconMenu extends ALElement {\n  static el = 'al-icon-menu';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **xs** renders a smaller size than default (8px)\n   * - **sm** renders a smaller size than default (12px)\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   * - **xxl** renders a larger size than the lg variant (36px)\n   * - **xxxl** renders a larger size than the lg variant (40px)\n   */\n  @property()\n  accessor size: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'xxxl';\n\n  render() {\n    const componentClassName = this.componentClassNames('al-c-icon', {\n      'al-c-icon--xs': this.size === 'xs',\n      'al-c-icon--sm': this.size === 'sm',\n      'al-c-icon--md': this.size === 'md',\n      'al-c-icon--lg': this.size === 'lg',\n      'al-c-icon--xl': this.size === 'xl',\n      'al-c-icon--xxl': this.size === 'xxl',\n      'al-c-icon--xxxl': this.size === 'xxxl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Menu}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).alAutoRegistry === true && customElements.get(ALIconMenu.el) === undefined) {\n  customElements.define(ALIconMenu.el, ALIconMenu);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'al-icon-menu': ALIconMenu;\n  }\n}\n"],"names":[],"sourceRoot":""}