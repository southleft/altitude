import { html, unsafeCSS } from 'lit';
import { property } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { nanoid } from 'nanoid';
import { ALElement } from '../ALElement';
import styles from './toggle.scss';

/**
 * Component: al-toggle
 */
export class ALToggle extends ALElement {
  static el = 'al-toggle';

  static get styles() {
    return unsafeCSS(styles.toString());
  }

  /**
   * Checked attribute
   * - If true, sets the treatment to represent an on state
   * - If false, sets the treatment to represent an off state
   */
  @property({ type: Boolean })
  accessor isChecked: boolean;

  /**
   * Disabled attribute
   * - Changes the component's treatment to represent a disabled state
   */
  @property({ type: Boolean })
  accessor isDisabled: boolean;

  /**
   * Field ID
   * - Links the label to the toggle
   * - By default it is autogenerated by nanoid
   */
  @property()
  accessor fieldId: string;

  /**
   * Label
   * - The text inside the label tag
   * - Does not display on the front-end, but is used for A11y
   */
  @property()
  accessor label: string = 'Toggle';

  /**
   * Name attribute
   * - The name attribute used on the toggle
   */
  @property()
  accessor name: string;

  /**
   * Connected callback lifecycle
   * 1. Autogenerates Field ID for A11y if this property isn't provided
   */
  connectedCallback() {
    super.connectedCallback();
    this.fieldId = this.fieldId || nanoid(); /* 1 */
  }

  /**
   * Trigger toggle event
   *  1. Toggle the component's checked state
   *  2. Dispatch the custom event
   */
  triggerToggleEvent() {
    /* 1 */
    this.isChecked = !this.isChecked;

    /* 2 */
    this.dispatch({
      eventName: 'onToggleChange',
      detailObj: {
        checked: this.isChecked
      }
    });
  }

  /**
   * Handle on keydown events
   * 1. If the Enter key is pressed, trigger the toggle event
   */
  handleKeydown(e: KeyboardEvent) {
    if (e.code === 'Enter') {
      this.triggerToggleEvent();
    }
  }

  render() {
    const componentClassNames = this.componentClassNames('al-c-toggle', {
      'al-is-checked': this.isChecked === true,
      'al-is-disabled': this.isDisabled === true
    });

    return html`
      <div class="${componentClassNames}">
        <input
          class="al-c-toggle__checkbox"
          type="checkbox"
          id="${this.fieldId}"
          name="${ifDefined(this.name)}"
          ?checked=${this.isChecked}
          ?disabled=${this.isDisabled}
          @change=${this.triggerToggleEvent}
          @keydown=${this.handleKeydown}
        />
        <label class="al-c-toggle__label" for=${this.fieldId}>
          <span class="al-u-is-vishidden">${this.label}</span>
        </label>
      </div>
    `;
  }
}

if ((globalThis as any).alAutoRegistry === true && customElements.get(ALToggle.el) === undefined) {
  customElements.define(ALToggle.el, ALToggle);
}

declare global {
  interface HTMLElementTagNameMap {
    'al-toggle': ALToggle;
  }
}
