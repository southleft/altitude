@import '../../tokens/sl/component';
/*------------------------------------*\
  #CHECKBOX-ITEM
\*------------------------------------*/

/**
 * Checkbox item
 */
.sl-c-checkbox-item {
  display: flex;
  flex-direction: column;
  gap: size(1);
}

/**
 * Checkbox container
 * 1. The container that holds the checkbox and label
 */
.sl-c-checkbox-item__container {
  position: relative;
  display: flex;
  align-items: center;
  gap: size(0.5);
}

/**
 * Checkbox label
 * 1. The label that displays next to the checkbox
 */
.sl-c-checkbox-item__label {
  @include label-styles;
  color: var(--sl-theme-color-content-default);
  cursor: pointer;
}

/**
 * Checkbox
 * 1. The div that holds the input, custom check, and ripple
 */
.sl-c-checkbox-item__checkbox {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: size(5);
  height: size(5);
  background-color: var(--sl-theme-color-background-transparent-default);
}

/**
 * Checkbox input
 * 1. The native input that's hidden
 */
.sl-c-checkbox-item__input {
  appearance: none;
  display: block;
  margin: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
  z-index: var(--sl-z-index-100);
  border-radius: var(--sl-theme-border-radius-lg);

  /**
   * Disabled state
   */
  &:disabled {
    cursor: not-allowed;
  }

  /**
   * Focused state
   */
  &:focus-visible {
    @include focus-inset;
  }
}

/**
 * Checkbox ripple
 * 1. The circle that appears behind the custom check on hover and active
 */
.sl-c-checkbox-item__ripple {
  z-index: 0;
  position: absolute;
  inset: 0;
  margin: auto;
  width: 100%;
  height: 100%;
  transform: scale(0);
  border-radius: var(--sl-theme-border-radius-round);
  transition: all var(--sl-theme-animation-duration-long) var(--sl-theme-animation-timing);
  background-color: var(--sl-theme-color-background-transparent-default);

  /**
   * Ripple on native input hover
   */
  .sl-c-checkbox-item__input:hover:not(:active, :disabled) + * + & {
    transform: scale(1);
    background-color: var(--sl-theme-color-background-secondary-default);
  }
}

/**
 * Custom checkbox
 * 1. Displays a custom styled checkbox
 */
.sl-c-checkbox-item__custom-check {
  z-index: 1;
  position: absolute;
  inset: 0;
  margin: auto;
  width: size(2.25);
  height: size(2.25);
  overflow: hidden;
  background-color: var(--sl-theme-color-background-transparent-default);
  border-radius: var(--sl-theme-border-radius-xs);
  border: var(--sl-theme-border-width-md) solid var(--sl-theme-color-content-default);
  transition: all var(--sl-theme-animation-duration) var(--sl-theme-animation-timing);

  /**
   * Custom checkbox on native input checked and indeterminate
   */
  .sl-c-checkbox-item__input:checked + &,
  .sl-is-indeterminate & {
    border-color: var(--sl-theme-color-border-accent-default);
  }

  /**
   * Custom checkbox with error
   */
  .sl-is-error & {
    border-color: var(--sl-theme-color-border-danger-default);
  }

  /**
   * Custom checkbox with disabled
   */
  .sl-c-checkbox-item__input:disabled + & {
    opacity: var(--sl-theme-opacity-disabled);
  }

  /**
   * Custom checkbox with disabled and checked
   */
  .sl-c-checkbox-item__input:checked:disabled + &,
  .sl-is-indeterminate .sl-c-checkbox-item__input:disabled + & {
    border: none;
  }

  /**
   * Custom check
   */
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    margin: auto;
    display: block;
    width: 100%;
    height: 100%;
    mix-blend-mode: color-dodge;
    mask-repeat: no-repeat;
    mask-position: center center;
    mask-size: size(2.25) size(2.25);
    mask-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18"%3E%3Cpath d="m0,0v18h18V0H0Zm14.88,6.38l-7,7c-.49.49-1.28.49-1.77,0l-3-3c-.49-.49-.49-1.28,0-1.77.49-.49,1.28-.49,1.77,0l2.12,2.12,6.12-6.12c.49-.49,1.28-.49,1.77,0,.49.49.49,1.28,0,1.77Z" fill="white" stroke-width="0"/%3E%3C/svg%3E');
    -webkit-mask-repeat: no-repeat;
    -webkit-mask-position: center center;
    -webkit-mask-size: size(2.25) size(2.25);
    -webkit-mask-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18"%3E%3Cpath d="m0,0v18h18V0H0Zm14.88,6.38l-7,7c-.49.49-1.28.49-1.77,0l-3-3c-.49-.49-.49-1.28,0-1.77.49-.49,1.28-.49,1.77,0l2.12,2.12,6.12-6.12c.49-.49,1.28-.49,1.77,0,.49.49.49,1.28,0,1.77Z" fill="white" stroke-width="0"/%3E%3C/svg%3E');
    background-color: var(--sl-theme-color-border-accent-default);
    opacity: 0;

    /**
     * Custom check when native input is checked
     */
    .sl-c-checkbox-item__input:checked + & {
      opacity: inherit;
    }

    /**
     * Custom check when indeterminate
     */
    .sl-is-indeterminate & {
      opacity: inherit;
      mask-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18"%3E%3Cpath d="m0,0v18h18V0H0Zm12.91,10.25H4.91c-.69,0-1.25-.56-1.25-1.25s.56-1.25,1.25-1.25h8c.69,0,1.25.56,1.25,1.25s-.56,1.25-1.25,1.25Z" fill="white" stroke-width="0"/%3E%3C/svg%3E');
      -webkit-mask-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18"%3E%3Cpath d="m0,0v18h18V0H0Zm12.91,10.25H4.91c-.69,0-1.25-.56-1.25-1.25s.56-1.25,1.25-1.25h8c.69,0,1.25.56,1.25,1.25s-.56,1.25-1.25,1.25Z" fill="white" stroke-width="0"/%3E%3C/svg%3E');
    }

    /**
     * Custom check when native input is checked and disabled
     */
    .sl-c-checkbox-item__input:checked:disabled + &,
    .sl-is-indeterminate .sl-c-checkbox-item__input:disabled + & {
      background-color: var(--sl-theme-color-content-default);
    }
  }
}

/**
 * Checkbox item field note
 * 1. Targets field notes that are added via a slot or property
 */
slot[name="field-note"],
slot[name="error"] {
  --sl-field-note-margin-inline-start: #{size(1)};
}

/**
 * Checkbox item field note slotted
 * 1. Targets field notes that are added via a slot
 */
slot[name="field-note"]::slotted(*),
slot[name="error"]::slotted(*) {
  /**
   * Field note with error state
   * 1. Ensures the error styles are still applied even if a slotted field note does not have ?isError applied
   */
  .sl-is-error & {
    --sl-field-note-color: var(--sl-theme-color-border-danger-default);
  }

  /**
   * Field note with disabled state
   * 1. Ensures the disabled styles are still applied even if a slotted field note does not have ?isDisabled applied
   */
  .sl-is-disabled & {
    opacity: var(--sl-theme-opacity-disabled);
  }
}