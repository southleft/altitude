{"version":3,"file":"icon-icon-stories.b2dd67ff.iframe.bundle.js","mappings":";;;AAwCA;AACA;AACA;AACA;;;;AAKA;ACvBA;AAEA;;;;ACmBA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA","sources":["webpack://sl-web-components/./components/icon/icon.ts","webpack://sl-web-components/","webpack://sl-web-components/./components/icon/icons/add.ts","webpack://sl-web-components/./components/icon/icons/chevron-down.ts"],"sourcesContent":["import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../SLElement';\nimport styles from './icon.scss';\n\n/**\n * Component: sl-icon-[ICON_NAME]\n */\nexport class SLIcon extends SLElement {\n  static el = 'sl-icon';\n\n  static get styles() {\n    return unsafeCSS(styles);\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        <slot></slot>\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIcon.el) === undefined) {\n  customElements.define(SLIcon.el, SLIcon);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon': SLIcon;\n  }\n}\n",null,"import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Add from '../svgs/add.svg';\n\n/**\n * Icon: sl-icon-add\n */\nexport class SLIconAdd extends SLElement {\n  static el = 'sl-icon-add';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-add', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Add}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconAdd.el) === undefined) {\n  customElements.define(SLIconAdd.el, SLIconAdd);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-add': SLIconAdd;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport ChevronDown from '../svgs/chevron-down.svg';\n\n/**\n * Icon: sl-icon-chevron-down\n */\nexport class SLIconChevronDown extends SLElement {\n  static el = 'sl-icon-chevron-down';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-chevron-down', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${ChevronDown}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconChevronDown.el) === undefined) {\n  customElements.define(SLIconChevronDown.el, SLIconChevronDown);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-chevron-down': SLIconChevronDown;\n  }\n}\n"],"names":[],"sourceRoot":""}