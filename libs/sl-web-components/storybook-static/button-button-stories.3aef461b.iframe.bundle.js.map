{"version":3,"file":"button-button-stories.3aef461b.iframe.bundle.js","mappings":";;AAoIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;;AAIA;;AAIA;ACnGA;;;;AAKA;AACA;;;;AAUA;;AAHA;;AA6DA;;;AAYA;;;;;;;AAgBA;;;;AChIA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA","sources":["webpack://sl-web-components/./components/button/button.ts","webpack://sl-web-components/","webpack://sl-web-components/./components/icon/icons/done.ts","webpack://sl-web-components/./components/icon/icons/send.ts"],"sourcesContent":["import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { FormController } from '../../controllers/form';\nimport { SLElement } from '../SLElement';\nimport styles from './button.scss';\n\n/**\n * Component: sl-button\n * - Buttons serve as interactive elements that enable users to execute actions or transition to different sections.\n * @slot \"before\" - Content to display before the Button text, typically an Icon\n * @slot \"after\" - Content to display after the Button text, typically an Icon\n */\nexport class SLButton extends SLElement {\n  static el = 'sl-button';\n\n  static get styles() {\n    return unsafeCSS(styles);\n  }\n\n  protected formController = new FormController(this);\n\n  /**\n   * Type of button\n   */\n  @property()\n  accessor type: 'button' | 'submit' | 'reset';\n\n  /**\n   * Style variant\n   * - **secondary** renders the button used for primary actions\n   * - **danger** renders the button used for caution actions\n   */\n  @property()\n  accessor variant: 'secondary' | 'tertiary' | 'danger';\n\n  /**\n   * Target attribute for a link (i.e. set to _blank to open in new tab)\n   * - **_blank** yields a link that opens in a new tab\n   * - **_self** yields a link that loads the URL into the same browsing context as the current one. This is the default behavior\n   * - **_parent** yields a link that loads the URL into the parent browsing context of the current one. If there is no parent, this behaves the same way as _self\n   * - **_top** yields a link that loads the URL into the top-level browsing context. If there is no parent, this behaves the same way as _self.\n   */\n  @property()\n  accessor target: '_blank' | '_self' | '_parent' | '_top';\n\n  /**\n   * URL if this is an <a> element - this swaps <button> for <a>\n   */\n  @property()\n  accessor href: string;\n\n  /**\n   * Indicates the name when submitted with form data.\n   */\n  @property()\n  accessor name: string;\n\n  /**\n   * Indicates the aria label to apply to the button.\n   */\n  @property()\n  accessor label: string;\n\n  /**\n   * Indicates the value associated with the name when submitted with form data.\n   */\n  @property()\n  accessor value: string;\n\n  /**\n   * Indicates this button is a toggle button and whether it is pressed or not.\n   */\n  @property()\n  accessor isPressed: boolean | 'mixed';\n\n  /**\n   * Disabled attribute\n   */\n  @property({ type: Boolean })\n  accessor isDisabled: boolean;\n\n  /**\n   * Indicates this button is a toggle button and whether it is pressed or not.\n   */\n  @property({ type: Boolean })\n  accessor isExpanded: boolean;\n\n  /**\n   * Visually hide button text (but text is still accessible to assistive technology)\n   * 1. Use this for icon-only buttons for accessibility\n   */\n  @property({ type: Boolean })\n  accessor hideText: boolean;\n\n  /**\n   * Full width button\n   */\n  @property({ type: Boolean })\n  accessor fullWidth: boolean;\n\n  /**\n   * aria-controls attribute on the button\n   * 1. Used for items like the buttons attached drawers\n   */\n  @property()\n  accessor ariaControls: string;\n\n  /**\n   * Handle click events\n   * 1. When we click on button which has type=submit trigger requestSubmit on closest form element in order to invoke submit event on form element\n   */\n  handleOnClick() {\n    /* 1 */\n    if (this.type === 'submit' || this.type === 'reset') {\n      this.formController.submit(this.type);\n    }\n  }\n\n  render() {\n    const componentClassNames = this.componentClassNames('sl-c-button', {\n      'sl-c-button--secondary': this.variant === 'secondary',\n      'sl-c-button--tertiary': this.variant === 'tertiary',\n      'sl-c-button--danger': this.variant === 'danger',\n      'sl-c-button--full-width': this.fullWidth === true,\n      'sl-c-button--icon-only': this.hideText === true,\n      'sl-is-expanded': this.isExpanded === true\n    });\n\n    if (this.href) {\n      return html`\n        <a\n          href=\"${ifDefined(this.href)}\"\n          role=\"button\"\n          class=\"${componentClassNames}\"\n          aria-label=${ifDefined(this.label)}\n          aria-pressed=${ifDefined(this.isPressed)}\n          aria-expanded=${ifDefined(this.isExpanded)}\n          aria-controls=${ifDefined(this.ariaControls)}\n          target=${ifDefined(this.target)}\n        >\n          ${this.slotNotEmpty('before') && html`<span class=\"sl-c-button__icon\"><slot name=\"before\"></slot></span>`}\n          <span class=\"${this.hideText && 'sl-u-is-vishidden'} sl-c-button__text\">\n            <slot></slot>\n          </span>\n          ${this.slotNotEmpty('after') && html`<span class=\"sl-c-button__icon\"><slot name=\"after\"></slot></span>`}\n        </a>\n      `;\n    } else {\n      return html`\n        <button\n          @click=${this.handleOnClick}\n          class=\"${componentClassNames}\"\n          type=${ifDefined(this.type)}\n          value=${ifDefined(this.value)}\n          name=${ifDefined(this.name)}\n          aria-label=${ifDefined(this.label)}\n          ?disabled=${this.isDisabled}\n          aria-pressed=${ifDefined(this.isPressed)}\n          aria-expanded=${ifDefined(this.isExpanded)}\n          part=\"button\"\n        >\n          ${this.slotNotEmpty('before') && html`<span class=\"sl-c-button__icon\"><slot name=\"before\"></slot></span>`}\n          <span class=\"${this.hideText && 'sl-u-is-vishidden'} sl-c-button__text\">\n            <slot></slot>\n          </span>\n\n          ${this.slotNotEmpty('after') && html`<span class=\"sl-c-button__icon\"><slot name=\"after\"></slot></span>`}\n        </button>\n      `;\n    }\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLButton.el) === undefined) {\n  customElements.define(SLButton.el, SLButton);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-button': SLButton;\n  }\n}\n",null,"import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Done from '../svgs/done.svg';\n\n/**\n * Icon: sl-icon-done\n */\nexport class SLIconDone extends SLElement {\n  static el = 'sl-icon-done';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-done', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Done}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconDone.el) === undefined) {\n  customElements.define(SLIconDone.el, SLIconDone);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-done': SLIconDone;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Send from '../svgs/send.svg';\n\n/**\n * Icon: sl-icon-send\n */\nexport class SLIconSend extends SLElement {\n  static el = 'sl-icon-send';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-send', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Send}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconSend.el) === undefined) {\n  customElements.define(SLIconSend.el, SLIconSend);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-send': SLIconSend;\n  }\n}\n"],"names":[],"sourceRoot":""}