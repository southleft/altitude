{"version":3,"file":"icon-grid-icon-grid-stories.7ebc81f1.iframe.bundle.js","mappings":";;;AA8BA;;AAGA;;;;ACaA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA;;;;ACRA;AACA;AACA;AACA;;AAEA;;AAGA","sources":["webpack://sl-web-components/./.storybook/components/icon-grid/icon-grid.ts","webpack://sl-web-components/./components/icon/icons/add-square.ts","webpack://sl-web-components/./components/icon/icons/add.ts","webpack://sl-web-components/./components/icon/icons/attachment.ts","webpack://sl-web-components/./components/icon/icons/calendar.ts","webpack://sl-web-components/./components/icon/icons/chevron-down.ts","webpack://sl-web-components/./components/icon/icons/chevron-left.ts","webpack://sl-web-components/./components/icon/icons/chevron-right.ts","webpack://sl-web-components/./components/icon/icons/chevron-up.ts","webpack://sl-web-components/./components/icon/icons/close.ts","webpack://sl-web-components/./components/icon/icons/document.ts","webpack://sl-web-components/./components/icon/icons/done.ts","webpack://sl-web-components/./components/icon/icons/dots-horizontal.ts","webpack://sl-web-components/./components/icon/icons/dots-vertical.ts","webpack://sl-web-components/./components/icon/icons/emoji.ts","webpack://sl-web-components/./components/icon/icons/help.ts","webpack://sl-web-components/./components/icon/icons/info.ts","webpack://sl-web-components/./components/icon/icons/list.ts","webpack://sl-web-components/./components/icon/icons/menu.ts","webpack://sl-web-components/./components/icon/icons/minus.ts","webpack://sl-web-components/./components/icon/icons/search.ts","webpack://sl-web-components/./components/icon/icons/send.ts","webpack://sl-web-components/./components/icon/icons/user.ts","webpack://sl-web-components/./components/icon/icons/warning-circle.ts","webpack://sl-web-components/./components/icon/icons/warning-triangle.ts"],"sourcesContent":["import { html, LitElement, unsafeCSS } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\nimport styles from './icon-grid.scss';\n\n@customElement('icon-grid')\nexport class IconGrid extends LitElement {\n  static get styles() {\n    return unsafeCSS(styles);\n  }\n\n  ALL_ICONS = require\n    .context('../../../components/icon/icons', false, /\\.ts$/)\n    .keys()\n    .map((path) => ({ name: path.match(/([\\w\\s-]*)\\.ts$/)[1] }));\n\n  renderIconList() {\n    return this.ALL_ICONS.map((item) => {\n      return unsafeHTML(\n        `<li class=\"icon-grid__item\">\n          <sl-icon-${item.name}></sl-icon-${item.name}>\n          <span class=\"icon-grid__text\">${item.name}</span>\n        </li>`\n      );\n    });\n  }\n\n  render() {\n    return html`\n      <ul class=\"icon-grid\">\n        ${this.renderIconList()}\n      </ul>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'icon-grid': IconGrid;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport AddSquare from '../svgs/add-square.svg';\n\n/**\n * Icon: sl-icon-add-square\n */\nexport class SLIconAddSquare extends SLElement {\n  static el = 'sl-icon-add-square';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-add-square', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${AddSquare}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconAddSquare.el) === undefined) {\n  customElements.define(SLIconAddSquare.el, SLIconAddSquare);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-add-square': SLIconAddSquare;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Add from '../svgs/add.svg';\n\n/**\n * Icon: sl-icon-add\n */\nexport class SLIconAdd extends SLElement {\n  static el = 'sl-icon-add';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-add', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Add}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconAdd.el) === undefined) {\n  customElements.define(SLIconAdd.el, SLIconAdd);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-add': SLIconAdd;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Attachment from '../svgs/attachment.svg';\n\n/**\n * Icon: sl-icon-attachment\n */\nexport class SLIconAttachment extends SLElement {\n  static el = 'sl-icon-attachment';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-attachment', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Attachment}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconAttachment.el) === undefined) {\n  customElements.define(SLIconAttachment.el, SLIconAttachment);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-attachment': SLIconAttachment;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Calendar from '../svgs/calendar.svg';\n\n/**\n * Icon: sl-icon-calendar\n */\nexport class SLIconCalendar extends SLElement {\n  static el = 'sl-icon-calendar';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-calendar', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Calendar}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconCalendar.el) === undefined) {\n  customElements.define(SLIconCalendar.el, SLIconCalendar);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-calendar': SLIconCalendar;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport ChevronDown from '../svgs/chevron-down.svg';\n\n/**\n * Icon: sl-icon-chevron-down\n */\nexport class SLIconChevronDown extends SLElement {\n  static el = 'sl-icon-chevron-down';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-chevron-down', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${ChevronDown}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconChevronDown.el) === undefined) {\n  customElements.define(SLIconChevronDown.el, SLIconChevronDown);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-chevron-down': SLIconChevronDown;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport ChevronLeft from '../svgs/chevron-left.svg';\n\n/**\n * Icon: sl-icon-chevron-left\n */\nexport class SLIconChevronLeft extends SLElement {\n  static el = 'sl-icon-chevron-left';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-chevron-left', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${ChevronLeft}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconChevronLeft.el) === undefined) {\n  customElements.define(SLIconChevronLeft.el, SLIconChevronLeft);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-chevron-left': SLIconChevronLeft;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport ChevronRight from '../svgs/chevron-right.svg';\n\n/**\n * Icon: sl-icon-chevron-right\n */\nexport class SLIconChevronRight extends SLElement {\n  static el = 'sl-icon-chevron-right';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-chevron-right', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${ChevronRight}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconChevronRight.el) === undefined) {\n  customElements.define(SLIconChevronRight.el, SLIconChevronRight);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-chevron-right': SLIconChevronRight;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport ChevronUp from '../svgs/chevron-up.svg';\n\n/**\n * Icon: sl-icon-chevron-up\n */\nexport class SLIconChevronUp extends SLElement {\n  static el = 'sl-icon-chevron-up';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-chevron-up', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${ChevronUp}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconChevronUp.el) === undefined) {\n  customElements.define(SLIconChevronUp.el, SLIconChevronUp);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-chevron-up': SLIconChevronUp;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Close from '../svgs/close.svg';\n\n/**\n * Icon: sl-icon-close\n */\nexport class SLIconClose extends SLElement {\n  static el = 'sl-icon-close';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-close', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Close}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconClose.el) === undefined) {\n  customElements.define(SLIconClose.el, SLIconClose);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-close': SLIconClose;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Document from '../svgs/document.svg';\n\n/**\n * Icon: sl-icon-document\n */\nexport class SLIconDocument extends SLElement {\n  static el = 'sl-icon-document';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-document', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Document}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconDocument.el) === undefined) {\n  customElements.define(SLIconDocument.el, SLIconDocument);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-document': SLIconDocument;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Done from '../svgs/done.svg';\n\n/**\n * Icon: sl-icon-done\n */\nexport class SLIconDone extends SLElement {\n  static el = 'sl-icon-done';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-done', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Done}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconDone.el) === undefined) {\n  customElements.define(SLIconDone.el, SLIconDone);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-done': SLIconDone;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport DotsHorizontal from '../svgs/dots-horizontal.svg';\n\n/**\n * Icon: sl-icon-dots-horizontal\n */\nexport class SLIconDotsHorizontal extends SLElement {\n  static el = 'sl-icon-dots-horizontal';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-dots-horizontal', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${DotsHorizontal}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconDotsHorizontal.el) === undefined) {\n  customElements.define(SLIconDotsHorizontal.el, SLIconDotsHorizontal);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-dots-horizontal': SLIconDotsHorizontal;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport DotsVertical from '../svgs/dots-vertical.svg';\n\n/**\n * Icon: sl-icon-dots-vertical\n */\nexport class SLIconDotsVertical extends SLElement {\n  static el = 'sl-icon-dots-vertical';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-dots-vertical', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${DotsVertical}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconDotsVertical.el) === undefined) {\n  customElements.define(SLIconDotsVertical.el, SLIconDotsVertical);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-dots-vertical': SLIconDotsVertical;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Emoji from '../svgs/emoji.svg';\n\n/**\n * Icon: sl-icon-emoji\n */\nexport class SLIconEmoji extends SLElement {\n  static el = 'sl-icon-emoji';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-emoji', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Emoji}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconEmoji.el) === undefined) {\n  customElements.define(SLIconEmoji.el, SLIconEmoji);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-emoji': SLIconEmoji;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Help from '../svgs/help.svg';\n\n/**\n * Icon: sl-icon-help\n */\nexport class SLIconHelp extends SLElement {\n  static el = 'sl-icon-help';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-help', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Help}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconHelp.el) === undefined) {\n  customElements.define(SLIconHelp.el, SLIconHelp);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-help': SLIconHelp;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Info from '../svgs/info.svg';\n\n/**\n * Icon: sl-icon-info\n */\nexport class SLIconInfo extends SLElement {\n  static el = 'sl-icon-info';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-info', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Info}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconInfo.el) === undefined) {\n  customElements.define(SLIconInfo.el, SLIconInfo);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-info': SLIconInfo;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport List from '../svgs/list.svg';\n\n/**\n * Icon: sl-icon-list\n */\nexport class SLIconList extends SLElement {\n  static el = 'sl-icon-list';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-list', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${List}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconList.el) === undefined) {\n  customElements.define(SLIconList.el, SLIconList);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-list': SLIconList;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Menu from '../svgs/menu.svg';\n\n/**\n * Icon: sl-icon-menu\n */\nexport class SLIconMenu extends SLElement {\n  static el = 'sl-icon-menu';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-menu', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Menu}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconMenu.el) === undefined) {\n  customElements.define(SLIconMenu.el, SLIconMenu);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-menu': SLIconMenu;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Minus from '../svgs/minus.svg';\n\n/**\n * Icon: sl-icon-minus\n */\nexport class SLIconMinus extends SLElement {\n  static el = 'sl-icon-minus';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-minus', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Minus}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconMinus.el) === undefined) {\n  customElements.define(SLIconMinus.el, SLIconMinus);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-minus': SLIconMinus;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Search from '../svgs/search.svg';\n\n/**\n * Icon: sl-icon-search\n */\nexport class SLIconSearch extends SLElement {\n  static el = 'sl-icon-search';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-search', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Search}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconSearch.el) === undefined) {\n  customElements.define(SLIconSearch.el, SLIconSearch);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-search': SLIconSearch;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport Send from '../svgs/send.svg';\n\n/**\n * Icon: sl-icon-send\n */\nexport class SLIconSend extends SLElement {\n  static el = 'sl-icon-send';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-send', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${Send}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconSend.el) === undefined) {\n  customElements.define(SLIconSend.el, SLIconSend);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-send': SLIconSend;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport User from '../svgs/user.svg';\n\n/**\n * Icon: sl-icon-user\n */\nexport class SLIconUser extends SLElement {\n  static el = 'sl-icon-user';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-user', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${User}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconUser.el) === undefined) {\n  customElements.define(SLIconUser.el, SLIconUser);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-user': SLIconUser;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport WarningCircle from '../svgs/warning-circle.svg';\n\n/**\n * Icon: sl-icon-warning-circle\n */\nexport class SLIconWarningCircle extends SLElement {\n  static el = 'sl-icon-warning-circle';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-warning-circle', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${WarningCircle}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconWarningCircle.el) === undefined) {\n  customElements.define(SLIconWarningCircle.el, SLIconWarningCircle);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-warning-circle': SLIconWarningCircle;\n  }\n}\n","import { html, unsafeCSS } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { SLElement } from '../../SLElement';\nimport styles from '../icon.scss';\nimport WarningTriangle from '../svgs/warning-triangle.svg';\n\n/**\n * Icon: sl-icon-warning-triangle\n */\nexport class SLIconWarningTriangle extends SLElement {\n  static el = 'sl-icon-warning-triangle';\n\n  static get styles() {\n    return unsafeCSS(styles.toString());\n  }\n\n  /**\n   * Icon title\n   */\n  @property()\n  accessor iconTitle: string;\n\n  /**\n   * Icon size\n   * - Default size is 16px\n   * - **md** renders a larger size than default (20px)\n   * - **lg** renders a larger size than the md variant (24px)\n   * - **xl** renders a larger size than the lg variant (32px)\n   */\n  @property()\n  accessor size: 'md' | 'lg' | 'xl';\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.classList.add('sl-c-icon');\n  }\n\n  render() {\n    const componentClassName = this.componentClassNames('sl-c-icon-warning-triangle', {\n      'sl-c-icon--md': this.size === 'md',\n      'sl-c-icon--lg': this.size === 'lg',\n      'sl-c-icon--xl': this.size === 'xl'\n    });\n\n    return html`\n      <span\n        aria-hidden=\"${!this.iconTitle}\"\n        aria-labelledby=\"${this.iconTitle}\"\n        class=\"${componentClassName}\"\n        role=\"${this.iconTitle ? 'img' : 'presentation'}\"\n      >\n        ${WarningTriangle}\n      </span>\n    `;\n  }\n}\n\nif ((globalThis as any).enAutoRegistry === true && customElements.get(SLIconWarningTriangle.el) === undefined) {\n  customElements.define(SLIconWarningTriangle.el, SLIconWarningTriangle);\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sl-icon-warning-triangle': SLIconWarningTriangle;\n  }\n}\n"],"names":[],"sourceRoot":""}