{
  "version": "experimental",
  "tags": [
    {
      "name": "sl-accordion-panel",
      "path": "./components/accordion-panel/accordion-panel.ts",
      "description": "Component: sl-accordion-panel\n\nAccordion Panel shows and hides content within the accordion component.\n- **slot**: The accordion panel content",
      "attributes": [
        {
          "name": "isActive",
          "description": "Active property\n1. Panel is open when set to true. Close when set to false",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled property",
          "type": "boolean"
        },
        {
          "name": "isLast",
          "description": "Is last?\n- Dynamically set by the SLAccordion\n- Removes the bottom border if it is the last item",
          "type": "boolean"
        },
        {
          "name": "idx",
          "description": "Index of the panel\n- Dynamically set by the SLAccordion",
          "type": "number"
        },
        {
          "name": "ariaControls",
          "description": "Aria Controls attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "ariaLabelledBy",
          "description": "Aria Labelled By attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-accordion-panel\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Active property\n1. Panel is open when set to true. Close when set to false",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled property",
          "type": "boolean"
        },
        {
          "name": "isLast",
          "attribute": "isLast",
          "description": "Is last?\n- Dynamically set by the SLAccordion\n- Removes the bottom border if it is the last item",
          "type": "boolean"
        },
        {
          "name": "idx",
          "attribute": "idx",
          "description": "Index of the panel\n- Dynamically set by the SLAccordion",
          "type": "number"
        },
        {
          "name": "ariaControls",
          "attribute": "ariaControls",
          "description": "Aria Controls attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "ariaLabelledBy",
          "attribute": "ariaLabelledBy",
          "description": "Aria Labelled By attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-accordion",
      "path": "./components/accordion/accordion.ts",
      "description": "Component: sl-accordion\n\nAccordion is a vertical list of panels used to show and hide related sections of content.\n- **slot**: The accordion content, a set of accordion panels",
      "attributes": [
        {
          "name": "expandAll",
          "description": "Expand all?\n- All panels will be in expand or open state when it's true",
          "type": "boolean"
        },
        {
          "name": "expandOneOnly",
          "description": "Single panel only?\n- Display only a single panel at a time",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-accordion\""
        },
        {
          "name": "expandAll",
          "attribute": "expandAll",
          "description": "Expand all?\n- All panels will be in expand or open state when it's true",
          "type": "boolean"
        },
        {
          "name": "expandOneOnly",
          "attribute": "expandOneOnly",
          "description": "Single panel only?\n- Display only a single panel at a time",
          "type": "boolean"
        },
        {
          "name": "accordionPanels",
          "description": "Query all the accordion panels",
          "type": "SLAccordionPanel[]"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-alert",
      "path": "./components/alert/alert.ts",
      "description": "Component: sl-alert\n\nAlert displays a short important message that will attract a user's attention without interrupting the user's task.\n- **slot**: The alert's main content or title\n- **slot** \"icon\": Slot in an icon to override the default one",
      "attributes": [
        {
          "name": "variant",
          "description": "Variants\n- **default** renders a alert that represents an informative state\n- **success** renders a alert that represents a success state\n- **warning** renders a alert that represents a warning state\n- **danger** renders a alert that represents an danger state",
          "type": "\"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "title",
          "description": "Optional title of the alert",
          "type": "string"
        },
        {
          "name": "isActive",
          "description": "isActive boolean\n- If true, the alert displays on the page\n- If false, the alert is hidden from the page",
          "type": "boolean"
        },
        {
          "name": "autoClose",
          "description": "Auto close?\n- Set whether you want the alert to auto close. Adjust the autoCloseDelay if you want longer than 3 seconds",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "autoCloseDelay",
          "description": "Auto close delay\n1. Number of seconds to close the alert when autoClose is enabled\n2. Default amount is 3",
          "type": "number",
          "default": "3"
        },
        {
          "name": "isDismissible",
          "description": "Dismissible?\n- If true, displays a close button with close functionality on the alert",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-alert\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variants\n- **default** renders a alert that represents an informative state\n- **success** renders a alert that represents a success state\n- **warning** renders a alert that represents a warning state\n- **danger** renders a alert that represents an danger state",
          "type": "\"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "title",
          "attribute": "title",
          "description": "Optional title of the alert",
          "type": "string"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "isActive boolean\n- If true, the alert displays on the page\n- If false, the alert is hidden from the page",
          "type": "boolean"
        },
        {
          "name": "autoClose",
          "attribute": "autoClose",
          "description": "Auto close?\n- Set whether you want the alert to auto close. Adjust the autoCloseDelay if you want longer than 3 seconds",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "autoCloseDelay",
          "attribute": "autoCloseDelay",
          "description": "Auto close delay\n1. Number of seconds to close the alert when autoClose is enabled\n2. Default amount is 3",
          "type": "number",
          "default": "3"
        },
        {
          "name": "isDismissible",
          "attribute": "isDismissible",
          "description": "Dismissible?\n- If true, displays a close button with close functionality on the alert",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-avatar",
      "path": "./components/avatar/avatar.ts",
      "description": "Component: sl-avatar\n\nAvatars are used to represent a user and can hold strings, icons, and images. Avatars can also be used with dot badges.\n- **slot**: The avatar content",
      "attributes": [
        {
          "name": "variant",
          "description": "Avatar varaint\n- **default** Renders an avatar with an height & width of 40px\n- **sm** Renders an avatar with an height & width of 28px",
          "type": "\"sm\""
        },
        {
          "name": "hasBadge",
          "description": "Has Badge?\n- If true, shows the badge on the outside of the avatar circle\n- If false, hides the badge",
          "type": "boolean"
        },
        {
          "name": "badgeVariant",
          "description": "Badge state variant\n- **default** Displays a badge with the default state\n- **success** renders a badge with success state treatment\n- **warning** renders a badge with warning state treatment\n- **danger** renders a badge with danger state treatment",
          "type": "\"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-avatar\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Avatar varaint\n- **default** Renders an avatar with an height & width of 40px\n- **sm** Renders an avatar with an height & width of 28px",
          "type": "\"sm\""
        },
        {
          "name": "hasBadge",
          "attribute": "hasBadge",
          "description": "Has Badge?\n- If true, shows the badge on the outside of the avatar circle\n- If false, hides the badge",
          "type": "boolean"
        },
        {
          "name": "badgeVariant",
          "attribute": "badgeVariant",
          "description": "Badge state variant\n- **default** Displays a badge with the default state\n- **success** renders a badge with success state treatment\n- **warning** renders a badge with warning state treatment\n- **danger** renders a badge with danger state treatment",
          "type": "\"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-badge",
      "path": "./components/badge/badge.ts",
      "description": "Component: sl-badge\n\nBadges are labels that hold small amounts of information. Badges can hold a number and can be paired with other components including icons, text, or avatars.\n- **slot**: The badge content",
      "attributes": [
        {
          "name": "isDot",
          "description": "isDot boolean\n- Makes the badge a small dot only",
          "type": "boolean"
        },
        {
          "name": "variant",
          "description": "State variant\n- **default** Displays a badge with the default state\n- **success** renders a badge with success state treatment\n- **warning** renders a badge with warning state treatment\n- **danger** renders a badge with danger state treatment",
          "type": "\"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "position",
          "description": "Positions the badge absolutely to its parent container.\n- **top-left** places the badge to the top left\n- **top-right** places the badge to the top right\n- **bottom-left** places the badge to the bottom left\n- **bottom-right** places the badge to the bottom right",
          "type": "\"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-badge\""
        },
        {
          "name": "isDot",
          "attribute": "isDot",
          "description": "isDot boolean\n- Makes the badge a small dot only",
          "type": "boolean"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "State variant\n- **default** Displays a badge with the default state\n- **success** renders a badge with success state treatment\n- **warning** renders a badge with warning state treatment\n- **danger** renders a badge with danger state treatment",
          "type": "\"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "position",
          "attribute": "position",
          "description": "Positions the badge absolutely to its parent container.\n- **top-left** places the badge to the top left\n- **top-right** places the badge to the top right\n- **bottom-left** places the badge to the bottom left\n- **bottom-right** places the badge to the bottom right",
          "type": "\"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-breadcrumbs-item",
      "path": "./components/breadcrumbs-item/breadcrumbs-item.ts",
      "description": "Component: sl-breadcrumbs-item\n\nBreadcrumbs Item is a singular link used within the breadcrumbs component.\n- **slot**: The breadcrumb item's content, typically text",
      "attributes": [
        {
          "name": "href",
          "description": "Link URL",
          "type": "string"
        },
        {
          "name": "target",
          "description": "Target attribute for a link (i.e. set to _blank to open in new tab)",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\""
        },
        {
          "name": "isCurrent",
          "description": "Indicates if this the is the currently active breadcrumb item\n- **true** This is the current breadcrumb\n- **false** This is not the current breadcrumb",
          "type": "boolean"
        },
        {
          "name": "isTruncated",
          "description": "Truncated attribute\n- Dynamically set by the SLBreadcrumbs\n- **true** The slotted content does not display in an <a></a> or <button></button>\n- **false** The slotted content does displays in an <a></a> or <button></button>",
          "type": "boolean"
        },
        {
          "name": "hasSeparator",
          "description": "Indicates whether or not to add a separator icon after the breadcrumb item",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-breadcrumbs-item\""
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Link URL",
          "type": "string"
        },
        {
          "name": "target",
          "attribute": "target",
          "description": "Target attribute for a link (i.e. set to _blank to open in new tab)",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\""
        },
        {
          "name": "isCurrent",
          "attribute": "isCurrent",
          "description": "Indicates if this the is the currently active breadcrumb item\n- **true** This is the current breadcrumb\n- **false** This is not the current breadcrumb",
          "type": "boolean"
        },
        {
          "name": "isTruncated",
          "attribute": "isTruncated",
          "description": "Truncated attribute\n- Dynamically set by the SLBreadcrumbs\n- **true** The slotted content does not display in an <a></a> or <button></button>\n- **false** The slotted content does displays in an <a></a> or <button></button>",
          "type": "boolean"
        },
        {
          "name": "hasSeparator",
          "attribute": "hasSeparator",
          "description": "Indicates whether or not to add a separator icon after the breadcrumb item",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-breadcrumbs",
      "path": "./components/breadcrumbs/breadcrumbs.ts",
      "description": "Component: sl-breadcrumbs\n\nBreadcrumbs are a list of links that help a user visualize a page's location within the hierarchical structure of a website. They provide navigation to any of the page's ancestors.\n- **slot**: The breadcrumbs content, a set of breadcrumb items",
      "attributes": [
        {
          "name": "label",
          "description": "Label attribute\n- Provides an accessible name for the breadcrumbs element",
          "type": "string",
          "default": "\"Breadcrumb\""
        },
        {
          "name": "isTruncated",
          "description": "Truncated attribute\n- **true** Collapse items under a SLPanel based on the itemsBefore/AfterCollpase properties\n- **false** Do not collapse any breacrumb items",
          "type": "boolean"
        },
        {
          "name": "itemsAfterCollapse",
          "description": "Number of items to display after the Panel in the Truncated treatment\n- Default is 1",
          "type": "number",
          "default": "1"
        },
        {
          "name": "itemsBeforeCollapse",
          "description": "Number of items to display before the Panel in the Truncated treatment\n- Default is 1",
          "type": "number",
          "default": "1"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-breadcrumbs\""
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Label attribute\n- Provides an accessible name for the breadcrumbs element",
          "type": "string",
          "default": "\"Breadcrumb\""
        },
        {
          "name": "isTruncated",
          "attribute": "isTruncated",
          "description": "Truncated attribute\n- **true** Collapse items under a SLPanel based on the itemsBefore/AfterCollpase properties\n- **false** Do not collapse any breacrumb items",
          "type": "boolean"
        },
        {
          "name": "itemsAfterCollapse",
          "attribute": "itemsAfterCollapse",
          "description": "Number of items to display after the Panel in the Truncated treatment\n- Default is 1",
          "type": "number",
          "default": "1"
        },
        {
          "name": "itemsBeforeCollapse",
          "attribute": "itemsBeforeCollapse",
          "description": "Number of items to display before the Panel in the Truncated treatment\n- Default is 1",
          "type": "number",
          "default": "1"
        },
        {
          "name": "breadcrumbsItems",
          "description": "Query all the SLBreadcrumbsItem's\n- Use get as truncated items do not pull from the slot",
          "type": "SLBreadcrumbsItem[]"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-button-group",
      "path": "./components/button-group/button-group.ts",
      "description": "Component: sl-button-group\n\nButton Group is used to group buttons and provide proper alignment.\n- **slot**: The button group content, a set of buttons",
      "attributes": [
        {
          "name": "behavior",
          "description": "Behavior variant\n- **default** renders the buttons in a row\n- **stacked** renders the buttons stacked on top of each other\n- **stretched** renders the buttons stretched to the width of the container\n- **responsive** renders the buttons stacked on small screens and in a row when space becomes available",
          "type": "\"stacked\" | \"stretched\" | \"responsive\""
        },
        {
          "name": "alignment",
          "description": "Alignment variant\n- **default** aligns the buttons to the left of the container\n- **center** aligns the buttons to the center of the container\n- **right** aligns the buttons to the right of the container",
          "type": "\"center\" | \"right\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-button-group\""
        },
        {
          "name": "behavior",
          "attribute": "behavior",
          "description": "Behavior variant\n- **default** renders the buttons in a row\n- **stacked** renders the buttons stacked on top of each other\n- **stretched** renders the buttons stretched to the width of the container\n- **responsive** renders the buttons stacked on small screens and in a row when space becomes available",
          "type": "\"stacked\" | \"stretched\" | \"responsive\""
        },
        {
          "name": "alignment",
          "attribute": "alignment",
          "description": "Alignment variant\n- **default** aligns the buttons to the left of the container\n- **center** aligns the buttons to the center of the container\n- **right** aligns the buttons to the right of the container",
          "type": "\"center\" | \"right\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-button",
      "path": "./components/button/button.ts",
      "description": "Component: sl-button\n\nButtons are interactive elements that enable users to execute actions.\n- **slot**: The button text content\n- **slot** \"before\": Content to display before the button text, typically an icon\n- **slot** \"after\": Content to display after the button text, typically an icon",
      "attributes": [
        {
          "name": "type",
          "description": "Type of button",
          "type": "\"button\" | \"submit\" | \"reset\""
        },
        {
          "name": "variant",
          "description": "Style variant\n- **default** renders the button used for primary actions\n- **secondary** renders the button with an outlined style\n- **tertiary** renders the button with a bare style\n- **danger** renders the button used for caution actions",
          "type": "\"danger\" | \"secondary\" | \"tertiary\""
        },
        {
          "name": "target",
          "description": "Target attribute for a link (i.e. set to _blank to open in new tab)\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one. This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one. If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context. If there is no parent, this behaves the same way as _self.",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\""
        },
        {
          "name": "href",
          "description": "URL if this is an <a> element - this swaps <button> for <a>",
          "type": "string"
        },
        {
          "name": "name",
          "description": "Indicates the name when submitted with form data.",
          "type": "string"
        },
        {
          "name": "label",
          "description": "Indicates the aria label to apply to the button.",
          "type": "string"
        },
        {
          "name": "value",
          "description": "Indicates the value associated with the name when submitted with form data.",
          "type": "string"
        },
        {
          "name": "isPressed",
          "description": "Indicates this button is a toggle button and whether it is pressed or not.",
          "type": "boolean | \"mixed\""
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "isExpanded",
          "description": "Indicates this button is a toggle button and whether it is pressed or not.",
          "type": "boolean"
        },
        {
          "name": "hideText",
          "description": "Visually hide button text (but text is still accessible to assistive technology)\n1. Use this for icon-only buttons for accessibility",
          "type": "boolean"
        },
        {
          "name": "fullWidth",
          "description": "Full width button",
          "type": "boolean"
        },
        {
          "name": "ariaControls",
          "description": "aria-controls attribute on the button\n1. Used for items like the buttons attached drawers",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-button\""
        },
        {
          "name": "type",
          "attribute": "type",
          "description": "Type of button",
          "type": "\"button\" | \"submit\" | \"reset\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variant\n- **default** renders the button used for primary actions\n- **secondary** renders the button with an outlined style\n- **tertiary** renders the button with a bare style\n- **danger** renders the button used for caution actions",
          "type": "\"danger\" | \"secondary\" | \"tertiary\""
        },
        {
          "name": "target",
          "attribute": "target",
          "description": "Target attribute for a link (i.e. set to _blank to open in new tab)\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one. This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one. If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context. If there is no parent, this behaves the same way as _self.",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\""
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "URL if this is an <a> element - this swaps <button> for <a>",
          "type": "string"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Indicates the name when submitted with form data.",
          "type": "string"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Indicates the aria label to apply to the button.",
          "type": "string"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "Indicates the value associated with the name when submitted with form data.",
          "type": "string"
        },
        {
          "name": "isPressed",
          "attribute": "isPressed",
          "description": "Indicates this button is a toggle button and whether it is pressed or not.",
          "type": "boolean | \"mixed\""
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "isExpanded",
          "attribute": "isExpanded",
          "description": "Indicates this button is a toggle button and whether it is pressed or not.",
          "type": "boolean"
        },
        {
          "name": "hideText",
          "attribute": "hideText",
          "description": "Visually hide button text (but text is still accessible to assistive technology)\n1. Use this for icon-only buttons for accessibility",
          "type": "boolean"
        },
        {
          "name": "fullWidth",
          "attribute": "fullWidth",
          "description": "Full width button",
          "type": "boolean"
        },
        {
          "name": "ariaControls",
          "attribute": "ariaControls",
          "description": "aria-controls attribute on the button\n1. Used for items like the buttons attached drawers",
          "type": "string"
        },
        {
          "name": "slotNodes",
          "description": "Queries nodes in the default slot\n1. Used to dynamically set the aria-label attribute if a label is not provided",
          "type": "Node[]"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-calendar",
      "path": "./components/calendar/calendar.ts",
      "description": "Component: sl-calendar\n\nCalendar provides a way for a user to select a date from a month.\n- **slot** \"before\": If content is slotted, it will override the default \"previous button\" icon\n- **slot** \"after\": If content is slotted, it will override the default \"next button\" icon",
      "attributes": [
        {
          "name": "disabledMinDate",
          "description": "Minimum date for disabled dates (format: yyyy/mm/dd)"
        },
        {
          "name": "disabledMaxDate",
          "description": "Maximum date for disabled dates (format: yyyy/mm/dd)"
        },
        {
          "name": "multiYear",
          "description": "Amount of years to go before and after the current date",
          "type": "number",
          "default": "3"
        },
        {
          "name": "previousButtonText",
          "type": "string",
          "default": "\"Previous Month\""
        },
        {
          "name": "nextButtonText",
          "type": "string",
          "default": "\"Next Month\""
        },
        {
          "name": "days",
          "description": "Container for current days in month",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "years",
          "description": "Container for years toggle",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "showMonthPopup",
          "description": "Value to track month picker display",
          "type": "boolean"
        },
        {
          "name": "resetDates",
          "description": "Make active calendar date inactive",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "selectedDate",
          "description": "Selected date"
        },
        {
          "name": "setActiveDate",
          "description": "Set a specific date to be active"
        },
        {
          "name": "datepickerId",
          "description": "Internal ID only for labeling datepicker popup"
        },
        {
          "name": "dateFormat",
          "description": "Specify date format for UI display",
          "type": "\"MMM dd, yyyy\" | \"MM/dd/yyyy\" | \"dd/MM/yyyy\" | \"yyyy/MM/dd\" | \"MMM dd yyyy\" | \"dd MMM yyyy\"",
          "default": "\"MMM dd, yyyy\""
        },
        {
          "name": "fullDateFormat",
          "description": "Specify \"full\" date format for aria role",
          "type": "string",
          "default": "\"d, EEEE MMMM yyyy\""
        },
        {
          "name": "disabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "iconName",
          "description": "Field note icon name",
          "type": "string"
        },
        {
          "name": "isDayShortHand",
          "description": "Show the day of the week as a short hand, e.g. \"M\" for Monday",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "startOnMonday",
          "description": "Start the day of the week on Monday",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-calendar\""
        },
        {
          "name": "currentDate",
          "description": "Current Month/Year",
          "type": "Date",
          "default": "\"new Date()\""
        },
        {
          "name": "navDate",
          "description": "Current Month/Year display in header",
          "type": "Date"
        },
        {
          "name": "disabledMinDate",
          "attribute": "disabledMinDate",
          "description": "Minimum date for disabled dates (format: yyyy/mm/dd)"
        },
        {
          "name": "disabledMaxDate",
          "attribute": "disabledMaxDate",
          "description": "Maximum date for disabled dates (format: yyyy/mm/dd)"
        },
        {
          "name": "multiYear",
          "attribute": "multiYear",
          "description": "Amount of years to go before and after the current date",
          "type": "number",
          "default": "3"
        },
        {
          "name": "previousButtonText",
          "attribute": "previousButtonText",
          "type": "string",
          "default": "\"Previous Month\""
        },
        {
          "name": "nextButtonText",
          "attribute": "nextButtonText",
          "type": "string",
          "default": "\"Next Month\""
        },
        {
          "name": "days",
          "attribute": "days",
          "description": "Container for current days in month",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "years",
          "attribute": "years",
          "description": "Container for years toggle",
          "type": "array",
          "default": "[]"
        },
        {
          "name": "showMonthPopup",
          "attribute": "showMonthPopup",
          "description": "Value to track month picker display",
          "type": "boolean"
        },
        {
          "name": "resetDates",
          "attribute": "resetDates",
          "description": "Make active calendar date inactive",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "selectedDate",
          "attribute": "selectedDate",
          "description": "Selected date"
        },
        {
          "name": "setActiveDate",
          "attribute": "setActiveDate",
          "description": "Set a specific date to be active"
        },
        {
          "name": "datepickerId",
          "attribute": "datepickerId",
          "description": "Internal ID only for labeling datepicker popup"
        },
        {
          "name": "dateFormat",
          "attribute": "dateFormat",
          "description": "Specify date format for UI display",
          "type": "\"MMM dd, yyyy\" | \"MM/dd/yyyy\" | \"dd/MM/yyyy\" | \"yyyy/MM/dd\" | \"MMM dd yyyy\" | \"dd MMM yyyy\"",
          "default": "\"MMM dd, yyyy\""
        },
        {
          "name": "fullDateFormat",
          "attribute": "fullDateFormat",
          "description": "Specify \"full\" date format for aria role",
          "type": "string",
          "default": "\"d, EEEE MMMM yyyy\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "iconName",
          "attribute": "iconName",
          "description": "Field note icon name",
          "type": "string"
        },
        {
          "name": "isDayShortHand",
          "attribute": "isDayShortHand",
          "description": "Show the day of the week as a short hand, e.g. \"M\" for Monday",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "startOnMonday",
          "attribute": "startOnMonday",
          "description": "Start the day of the week on Monday",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "calendarMonthPopup",
          "description": "Query the calendar month popup",
          "type": "HTMLElement"
        },
        {
          "name": "calendarMonthButton",
          "description": "Query the month selector button",
          "type": "HTMLElement"
        },
        {
          "name": "updateGrid"
        },
        {
          "name": "setGrid"
        },
        {
          "name": "setNextMonth"
        },
        {
          "name": "setPrevMonth"
        },
        {
          "name": "toggleMonthPopup"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-card",
      "path": "./components/card/card.ts",
      "description": "Component: sl-card\n\nCard displays content and actions on a single topic in a concise, scannable format.\n- **slot**: The main content of the card that appers below the header\n- **slot** \"actions-left\": The actions the appear to the top-left of the card\n- **slot** \"action-right\": The actions the appear to the top-right of the card\n- **slot** \"image\": The main image of the card that appears below the actions\n- **slot** \"header\": The main title of the card that appears below the image",
      "attributes": [
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-card\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-checkbox-item",
      "path": "./components/checkbox-item/checkbox-item.ts",
      "description": "Component: sl-checkbox-item\n\nCheckbox Item is a singular checkbox that is used within the checkbox component.\n- **slot**: The component content that appears next to the checkbox\n- **slot** \"field-note\": If content is slotted, it will display in place of the fieldNote property\n- **slot** \"error\": If content is slotted, it will display in place of the errorNote property",
      "attributes": [
        {
          "name": "isChecked",
          "description": "Checked attribute\n- Changes the component's treatment to represent an checked state",
          "type": "boolean"
        },
        {
          "name": "isIndeterminate",
          "description": "Indeterminate state\n- Changes the component's treatment to represent an indeterminate state",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Error state\n- Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isRequired",
          "description": "Required attribute\n- Sets the checkbox to be required for validation",
          "type": "boolean"
        },
        {
          "name": "hideLabel",
          "description": "Hide label?\n- If true, hides the label from displaying",
          "type": "boolean"
        },
        {
          "name": "name",
          "description": "Name attribute",
          "type": "string"
        },
        {
          "name": "value",
          "description": "Value attribute",
          "type": "string"
        },
        {
          "name": "errorNote",
          "description": "Error message\n- An error field note that displays below the checkbox input",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "Field note\n- The helper text that displays below the checkbox input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "description": "Id attribute\n- The ID used for A11y and to associate the label with the input",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "aria-describedby attribute\n- Applied to the field note or error note for A11y",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-checkbox-item\""
        },
        {
          "name": "isChecked",
          "attribute": "isChecked",
          "description": "Checked attribute\n- Changes the component's treatment to represent an checked state",
          "type": "boolean"
        },
        {
          "name": "isIndeterminate",
          "attribute": "isIndeterminate",
          "description": "Indeterminate state\n- Changes the component's treatment to represent an indeterminate state",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state\n- Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isRequired",
          "attribute": "isRequired",
          "description": "Required attribute\n- Sets the checkbox to be required for validation",
          "type": "boolean"
        },
        {
          "name": "hideLabel",
          "attribute": "hideLabel",
          "description": "Hide label?\n- If true, hides the label from displaying",
          "type": "boolean"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Name attribute",
          "type": "string"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "Value attribute",
          "type": "string"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "Error message\n- An error field note that displays below the checkbox input",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Field note\n- The helper text that displays below the checkbox input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "Id attribute\n- The ID used for A11y and to associate the label with the input",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "aria-describedby attribute\n- Applied to the field note or error note for A11y",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-checkbox",
      "path": "./components/checkbox/checkbox.ts",
      "description": "Component: sl-checkbox\n\nCheckbox lets a user select one or more items from a list, or turn an item on or off.\n- **slot**: The component content, a set of checkbox items\n- **slot** \"field-note\": If content is slotted, it will display in place of the fieldNote property\n- **slot** \"error\": If content is slotted, it will display in place of the errorNote property",
      "attributes": [
        {
          "name": "isError",
          "description": "Error state\n- Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isRequired",
          "description": "Required attribute\n- Sets the checkbox to be required for validation",
          "type": "boolean"
        },
        {
          "name": "hideLegend",
          "description": "Hide legend?\n- If true, hides the legend from displaying",
          "type": "boolean"
        },
        {
          "name": "label",
          "description": "Label\n- Displays inside the legend",
          "type": "string"
        },
        {
          "name": "errorNote",
          "description": "Error message\n- An error field note that displays below the checkbox input",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "Field note\n- The helper text that displays below the checkbox input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "description": "Id attribute\n- The ID used for A11y and to associate the label with the input",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "aria-describedby attribute\n- Applied to the field note or error note for A11y",
          "type": "string"
        },
        {
          "name": "variant",
          "description": "Variant\n- **default** Displays the checkbox items in a column\n- **horizontal** Displays the checkbox items in a row",
          "type": "\"horizontal\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-checkbox\""
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state\n- Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isRequired",
          "attribute": "isRequired",
          "description": "Required attribute\n- Sets the checkbox to be required for validation",
          "type": "boolean"
        },
        {
          "name": "hideLegend",
          "attribute": "hideLegend",
          "description": "Hide legend?\n- If true, hides the legend from displaying",
          "type": "boolean"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Label\n- Displays inside the legend",
          "type": "string"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "Error message\n- An error field note that displays below the checkbox input",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Field note\n- The helper text that displays below the checkbox input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "Id attribute\n- The ID used for A11y and to associate the label with the input",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "aria-describedby attribute\n- Applied to the field note or error note for A11y",
          "type": "string"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant\n- **default** Displays the checkbox items in a column\n- **horizontal** Displays the checkbox items in a row",
          "type": "\"horizontal\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-chip-group",
      "path": "./components/chip-group/chip-group.ts",
      "description": "Component: sl-chip-group\n\nChip Group is used to display chips in a row, with the ability to expand the row and increase the number of visible chips.\n- **slot**: The chip group content, a set of chips",
      "attributes": [
        {
          "name": "chipsVisible",
          "description": "Set the number of visible chips",
          "type": "number"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-chip-group\""
        },
        {
          "name": "chipsVisible",
          "attribute": "chipsVisible",
          "description": "Set the number of visible chips",
          "type": "number"
        },
        {
          "name": "chips",
          "description": "Query all the chips",
          "type": "SLChip[]"
        },
        {
          "name": "chipGroupCounter",
          "description": "Query the chip group counter",
          "type": "SLChip"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-chip",
      "path": "./components/chip/chip.ts",
      "description": "Component: sl-chip\n\nChips are compact elements that represent an input, attribute, or action.\n- **slot**: The chip content",
      "attributes": [
        {
          "name": "variant",
          "description": "Variant\n- **default** A chip with a strong contrast background\n- **info** A chip with a info background\n- **success** A chip with a success background\n- **warning** A chip with a warning background\n- **danger** A chip with a danger background",
          "type": "\"success\" | \"warning\" | \"danger\" | \"info\""
        },
        {
          "name": "type",
          "description": "Type variant\n- **default** A chip with rounded corners\n- **squared** A chip with squared corners",
          "type": "\"squared\""
        },
        {
          "name": "isDismissible",
          "description": "Dismissible property\n- **true** Adds an X to hide the chip on click\n- **false** Hides the X so the chip can not be hidden",
          "type": "boolean"
        },
        {
          "name": "isDismissed",
          "description": "Is dismissed property\n- **true** Hides the chip\n- **false** Shows the chip",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-chip\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant\n- **default** A chip with a strong contrast background\n- **info** A chip with a info background\n- **success** A chip with a success background\n- **warning** A chip with a warning background\n- **danger** A chip with a danger background",
          "type": "\"success\" | \"warning\" | \"danger\" | \"info\""
        },
        {
          "name": "type",
          "attribute": "type",
          "description": "Type variant\n- **default** A chip with rounded corners\n- **squared** A chip with squared corners",
          "type": "\"squared\""
        },
        {
          "name": "isDismissible",
          "attribute": "isDismissible",
          "description": "Dismissible property\n- **true** Adds an X to hide the chip on click\n- **false** Hides the X so the chip can not be hidden",
          "type": "boolean"
        },
        {
          "name": "isDismissed",
          "attribute": "isDismissed",
          "description": "Is dismissed property\n- **true** Hides the chip\n- **false** Shows the chip",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-contextual-menu",
      "path": "./components/contextual-menu/contextual-menu.ts",
      "description": "Component: sl-contextual-menu\n\nContextual Menu is a list of options that is opened/closed by a trigger and positioned around the trigger.\n- **slot**: The main body of the contextual menu\n- **slot** \"trigger\": The trigger that opens/closes the contextual menu",
      "attributes": [
        {
          "name": "heading",
          "description": "Heading text that appears in the header region",
          "type": "string"
        },
        {
          "name": "position",
          "description": "Positions the dropdown contextual menu absolutely to the trigger.\n- **default** places the contextual menuto the bottom left\n- **bottom-center** places the contextual menuto the bottom center\n- **bottom-right** places the contextual menuto the bottom right\n- **bottom-left** places the contextual menuto the bottom left\n- **top-center** places the contextual menuto the top center\n- **top-right** places the contextual menuto the top right\n- **top-left** places the contextual menuto the top left\n- **left** places the contextual menuto the left\n- **right** places the contextual menuto the right",
          "type": "\"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\" | \"right\" | \"bottom-center\" | \"top-center\" | \"left\"",
          "default": "\"bottom-left\""
        },
        {
          "name": "isActive",
          "description": "Is active?\n- **true** Shows the contextual menucontainer\n- **false** Hides the contextual menucontainer",
          "type": "boolean"
        },
        {
          "name": "isDismissible",
          "description": "Is dismissible?\n- **true** Shows the contextual menuclose button\n- **false** Hides the contextual menuclose button",
          "type": "boolean"
        },
        {
          "name": "ariaLabelledBy",
          "description": "Aria Labelled By attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "transitionDelay",
          "description": "Number of ms of the dialog's open/close css transition delay\n- Used to delay focus trap activation",
          "type": "number",
          "default": "400"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-contextual-menu\""
        },
        {
          "name": "heading",
          "attribute": "heading",
          "description": "Heading text that appears in the header region",
          "type": "string"
        },
        {
          "name": "position",
          "attribute": "position",
          "description": "Positions the dropdown contextual menu absolutely to the trigger.\n- **default** places the contextual menuto the bottom left\n- **bottom-center** places the contextual menuto the bottom center\n- **bottom-right** places the contextual menuto the bottom right\n- **bottom-left** places the contextual menuto the bottom left\n- **top-center** places the contextual menuto the top center\n- **top-right** places the contextual menuto the top right\n- **top-left** places the contextual menuto the top left\n- **left** places the contextual menuto the left\n- **right** places the contextual menuto the right",
          "type": "\"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\" | \"right\" | \"bottom-center\" | \"top-center\" | \"left\"",
          "default": "\"bottom-left\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Is active?\n- **true** Shows the contextual menucontainer\n- **false** Hides the contextual menucontainer",
          "type": "boolean"
        },
        {
          "name": "isDismissible",
          "attribute": "isDismissible",
          "description": "Is dismissible?\n- **true** Shows the contextual menuclose button\n- **false** Hides the contextual menuclose button",
          "type": "boolean"
        },
        {
          "name": "ariaLabelledBy",
          "attribute": "ariaLabelledBy",
          "description": "Aria Labelled By attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "transitionDelay",
          "attribute": "transitionDelay",
          "description": "Number of ms of the dialog's open/close css transition delay\n- Used to delay focus trap activation",
          "type": "number",
          "default": "400"
        },
        {
          "name": "contextualMenuTrigger",
          "description": "Query the contextual menutrigger",
          "type": "array"
        },
        {
          "name": "menuList",
          "description": "Query the list component in the menu's default slot",
          "type": "array"
        },
        {
          "name": "contextualMenuTriggerButton",
          "description": "Query the contextual menutrigger inner element"
        },
        {
          "name": "handleOnClickOutside"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-datepicker-field",
      "path": "./components/datepicker-field/datepicker-field.ts",
      "description": "Component: sl-datepicker-field\n\nDatepicker Field allows a user to select a date.\n- **slot** \"field-note\": If content is slotted, it will display in place of the fieldNote property\n- **slot** \"error\": If content is slotted, it will display in place of the errorNote property",
      "attributes": [
        {
          "name": "fieldId",
          "description": "The unique id of the field",
          "type": "string"
        },
        {
          "name": "label",
          "description": "The field's label",
          "type": "string",
          "default": "\"Date and Time\""
        },
        {
          "name": "hideLabel",
          "description": "Hide label?",
          "type": "boolean"
        },
        {
          "name": "name",
          "description": "The field's name attribute",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The field's value attribute",
          "type": "string"
        },
        {
          "name": "placeholder",
          "description": "Placeholder attribute\n- Specifies a short hint that describes the expected value of an <input> element",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "The field note displayed beneath the field",
          "type": "string"
        },
        {
          "name": "errorNote",
          "description": "Error note displayed beneath the field when in an error state",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Aria describedby\n- Used to connect the field note in the field to the input for accessibility",
          "type": "string"
        },
        {
          "name": "isRequired",
          "description": "The field's required attribute",
          "type": "boolean"
        },
        {
          "name": "isOptional",
          "description": "Optional state\n- Specifies that a field is optional and adds the text 'optional' to the label",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "The field's disabled attribute",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Error state indicating an issue with the field",
          "type": "boolean"
        },
        {
          "name": "isActive",
          "description": "Indicates whether a date has been selected",
          "type": "boolean"
        },
        {
          "name": "selectedDate",
          "description": "Holds the selected date value"
        },
        {
          "name": "setActiveDate",
          "description": "Set a specific date to be active"
        },
        {
          "name": "isoFormat",
          "description": "ISO Format for date",
          "type": "string",
          "default": "\"yyyy-MM-dd\""
        },
        {
          "name": "dateFormat",
          "description": "Specify date format for UI display",
          "type": "\"MMM dd, yyyy\" | \"MM/dd/yyyy\" | \"dd/MM/yyyy\" | \"yyyy/MM/dd\" | \"MMM dd yyyy\" | \"dd MMM yyyy\"",
          "default": "\"MMM dd, yyyy\""
        },
        {
          "name": "disabledMinDate",
          "description": "Minimum date for disabled dates (format: yyyy/mm/dd)"
        },
        {
          "name": "disabledMaxDate",
          "description": "Maximum date for disabled dates (format: yyyy/mm/dd)"
        },
        {
          "name": "multiYear",
          "description": "Amount of years to go before and after the current date",
          "type": "number",
          "default": "3"
        },
        {
          "name": "previousButtonText",
          "description": "Previous month button text",
          "type": "string",
          "default": "\"Previous Month\""
        },
        {
          "name": "nextButtonText",
          "description": "Next month button text",
          "type": "string",
          "default": "\"Next Month\""
        },
        {
          "name": "isDayShortHand",
          "description": "Show the day of the week as a short hand, e.g. \"M\" for Monday",
          "type": "boolean"
        },
        {
          "name": "startOnMonday",
          "description": "Start the day of the week on Monday",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-datepicker-field\""
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The unique id of the field",
          "type": "string"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "The field's label",
          "type": "string",
          "default": "\"Date and Time\""
        },
        {
          "name": "hideLabel",
          "attribute": "hideLabel",
          "description": "Hide label?",
          "type": "boolean"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "The field's name attribute",
          "type": "string"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The field's value attribute",
          "type": "string"
        },
        {
          "name": "placeholder",
          "attribute": "placeholder",
          "description": "Placeholder attribute\n- Specifies a short hint that describes the expected value of an <input> element",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "The field note displayed beneath the field",
          "type": "string"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "Error note displayed beneath the field when in an error state",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Aria describedby\n- Used to connect the field note in the field to the input for accessibility",
          "type": "string"
        },
        {
          "name": "isRequired",
          "attribute": "isRequired",
          "description": "The field's required attribute",
          "type": "boolean"
        },
        {
          "name": "isOptional",
          "attribute": "isOptional",
          "description": "Optional state\n- Specifies that a field is optional and adds the text 'optional' to the label",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "The field's disabled attribute",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state indicating an issue with the field",
          "type": "boolean"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Indicates whether a date has been selected",
          "type": "boolean"
        },
        {
          "name": "isActiveCalendar",
          "description": "Tracks the display state of the datepicker",
          "type": "boolean"
        },
        {
          "name": "selectedDate",
          "attribute": "selectedDate",
          "description": "Holds the selected date value"
        },
        {
          "name": "setActiveDate",
          "attribute": "setActiveDate",
          "description": "Set a specific date to be active"
        },
        {
          "name": "rawDateValue",
          "description": "The field's raw date value"
        },
        {
          "name": "originalRawValue",
          "description": "Saved input date value in date format"
        },
        {
          "name": "originalValue",
          "description": "Saved input datetime value"
        },
        {
          "name": "isoFormat",
          "attribute": "isoFormat",
          "description": "ISO Format for date",
          "type": "string",
          "default": "\"yyyy-MM-dd\""
        },
        {
          "name": "dateFormat",
          "attribute": "dateFormat",
          "description": "Specify date format for UI display",
          "type": "\"MMM dd, yyyy\" | \"MM/dd/yyyy\" | \"dd/MM/yyyy\" | \"yyyy/MM/dd\" | \"MMM dd yyyy\" | \"dd MMM yyyy\"",
          "default": "\"MMM dd, yyyy\""
        },
        {
          "name": "disabledMinDate",
          "attribute": "disabledMinDate",
          "description": "Minimum date for disabled dates (format: yyyy/mm/dd)"
        },
        {
          "name": "disabledMaxDate",
          "attribute": "disabledMaxDate",
          "description": "Maximum date for disabled dates (format: yyyy/mm/dd)"
        },
        {
          "name": "multiYear",
          "attribute": "multiYear",
          "description": "Amount of years to go before and after the current date",
          "type": "number",
          "default": "3"
        },
        {
          "name": "previousButtonText",
          "attribute": "previousButtonText",
          "description": "Previous month button text",
          "type": "string",
          "default": "\"Previous Month\""
        },
        {
          "name": "nextButtonText",
          "attribute": "nextButtonText",
          "description": "Next month button text",
          "type": "string",
          "default": "\"Next Month\""
        },
        {
          "name": "isDayShortHand",
          "attribute": "isDayShortHand",
          "description": "Show the day of the week as a short hand, e.g. \"M\" for Monday",
          "type": "boolean"
        },
        {
          "name": "startOnMonday",
          "attribute": "startOnMonday",
          "description": "Start the day of the week on Monday",
          "type": "boolean"
        },
        {
          "name": "popup",
          "description": "Query the popup",
          "type": "HTMLElement"
        },
        {
          "name": "textField",
          "description": "Query the text field",
          "type": "SLTextField"
        },
        {
          "name": "handleOnClickOutside"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-datetimepicker-field",
      "path": "./components/datetimepicker-field/datetimepicker-field.ts",
      "description": "Component: sl-datetimepicker-field\n\nDatetimepicker Field allows the user to select a date and time.\n- **slot** \"field-note\": If content is slotted, it will display in place of the fieldNote property\n- **slot** \"error\": If content is slotted, it will display in place of the errorNote property",
      "attributes": [
        {
          "name": "fieldId",
          "description": "The unique id of the field",
          "type": "string"
        },
        {
          "name": "label",
          "description": "The field's label",
          "type": "string",
          "default": "\"Date and Time\""
        },
        {
          "name": "hideLabel",
          "description": "Hide label?",
          "type": "boolean"
        },
        {
          "name": "name",
          "description": "The field's name attribute",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The field's value attribute",
          "type": "string"
        },
        {
          "name": "placeholder",
          "description": "Placeholder attribute\n- Specifies a short hint that describes the expected value of an <input> element",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "The field note displayed beneath the field",
          "type": "string"
        },
        {
          "name": "errorNote",
          "description": "Error note displayed beneath the field when in an error state",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Aria describedby\n- Used to connect the field note in the field to the input for accessibility",
          "type": "string"
        },
        {
          "name": "isRequired",
          "description": "The field's required attribute",
          "type": "boolean"
        },
        {
          "name": "isOptional",
          "description": "Optional state\n- Specifies that a field is optional and adds the text 'optional' to the label",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "The field's disabled attribute",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Error state indicating an issue with the field",
          "type": "boolean"
        },
        {
          "name": "isActive",
          "description": "Indicates whether a date has been selected",
          "type": "boolean"
        },
        {
          "name": "selectedDate",
          "description": "Holds the selected date value"
        },
        {
          "name": "setActiveDate",
          "description": "Set a specific date to be active"
        },
        {
          "name": "setActiveTime",
          "description": "Set a specific time to be active (24 hour format, e.g., setActiveTime=\"16:00\" for 4PM)"
        },
        {
          "name": "isoFormat",
          "description": "ISO Format for date",
          "type": "string",
          "default": "\"yyyy-MM-dd\""
        },
        {
          "name": "dateFormat",
          "description": "Specify date format for UI display",
          "type": "\"MMM dd, yyyy\" | \"MM/dd/yyyy\" | \"dd/MM/yyyy\" | \"yyyy/MM/dd\" | \"MMM dd yyyy\" | \"dd MMM yyyy\"",
          "default": "\"MMM dd, yyyy\""
        },
        {
          "name": "disabledMinDate",
          "description": "Minimum date for disabled dates (format: yyyy/mm/dd)"
        },
        {
          "name": "disabledMaxDate",
          "description": "Maximum date for disabled dates (format: yyyy/mm/dd)"
        },
        {
          "name": "multiYear",
          "description": "Amount of years to go before and after the current date",
          "type": "number",
          "default": "3"
        },
        {
          "name": "previousButtonText",
          "description": "Previous month button text",
          "type": "string",
          "default": "\"Previous Month\""
        },
        {
          "name": "nextButtonText",
          "description": "Next month button text",
          "type": "string",
          "default": "\"Next Month\""
        },
        {
          "name": "isDayShortHand",
          "description": "Show the day of the week as a short hand, e.g. \"M\" for Monday",
          "type": "boolean"
        },
        {
          "name": "startOnMonday",
          "description": "Start the day of the week on Monday",
          "type": "boolean"
        },
        {
          "name": "is24HourFormat",
          "description": "Use 24 hour time format",
          "type": "boolean"
        },
        {
          "name": "timeIncrements",
          "description": "Increments of time",
          "type": "number",
          "default": "30"
        },
        {
          "name": "timeStart",
          "description": "Minimum time for between times display (24 hour format, e.g., timeStart=${16} for 4PM)",
          "type": "number"
        },
        {
          "name": "timeEnd",
          "description": "Maximum time for between times display (24 hour format, e.g., timeEnd=${16} for 4PM)",
          "type": "number"
        },
        {
          "name": "timeSelectorLabel",
          "description": "Time selector heading label",
          "type": "string",
          "default": "\"Time\""
        },
        {
          "name": "cancelLabel",
          "description": "Cancel button label",
          "type": "string",
          "default": "\"Cancel\""
        },
        {
          "name": "submitLabel",
          "description": "Submit button label",
          "type": "string",
          "default": "\"Apply\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-datetimepicker-field\""
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The unique id of the field",
          "type": "string"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "The field's label",
          "type": "string",
          "default": "\"Date and Time\""
        },
        {
          "name": "hideLabel",
          "attribute": "hideLabel",
          "description": "Hide label?",
          "type": "boolean"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "The field's name attribute",
          "type": "string"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The field's value attribute",
          "type": "string"
        },
        {
          "name": "placeholder",
          "attribute": "placeholder",
          "description": "Placeholder attribute\n- Specifies a short hint that describes the expected value of an <input> element",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "The field note displayed beneath the field",
          "type": "string"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "Error note displayed beneath the field when in an error state",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Aria describedby\n- Used to connect the field note in the field to the input for accessibility",
          "type": "string"
        },
        {
          "name": "isRequired",
          "attribute": "isRequired",
          "description": "The field's required attribute",
          "type": "boolean"
        },
        {
          "name": "isOptional",
          "attribute": "isOptional",
          "description": "Optional state\n- Specifies that a field is optional and adds the text 'optional' to the label",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "The field's disabled attribute",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state indicating an issue with the field",
          "type": "boolean"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Indicates whether a date has been selected",
          "type": "boolean"
        },
        {
          "name": "isActiveCalendar",
          "description": "Tracks the display state of the datetimepicker",
          "type": "boolean"
        },
        {
          "name": "selectedDate",
          "attribute": "selectedDate",
          "description": "Holds the selected date value"
        },
        {
          "name": "selectedTime",
          "description": "Selected time"
        },
        {
          "name": "setActiveDate",
          "attribute": "setActiveDate",
          "description": "Set a specific date to be active"
        },
        {
          "name": "setActiveTime",
          "attribute": "setActiveTime",
          "description": "Set a specific time to be active (24 hour format, e.g., setActiveTime=\"16:00\" for 4PM)"
        },
        {
          "name": "rawDateValue",
          "description": "The field's raw date value"
        },
        {
          "name": "originalRawValue",
          "description": "Saved input date value in date format"
        },
        {
          "name": "originalValue",
          "description": "Saved input datetime value"
        },
        {
          "name": "originalTime",
          "description": "Saved time selection"
        },
        {
          "name": "isoFormat",
          "attribute": "isoFormat",
          "description": "ISO Format for date",
          "type": "string",
          "default": "\"yyyy-MM-dd\""
        },
        {
          "name": "dateFormat",
          "attribute": "dateFormat",
          "description": "Specify date format for UI display",
          "type": "\"MMM dd, yyyy\" | \"MM/dd/yyyy\" | \"dd/MM/yyyy\" | \"yyyy/MM/dd\" | \"MMM dd yyyy\" | \"dd MMM yyyy\"",
          "default": "\"MMM dd, yyyy\""
        },
        {
          "name": "disabledMinDate",
          "attribute": "disabledMinDate",
          "description": "Minimum date for disabled dates (format: yyyy/mm/dd)"
        },
        {
          "name": "disabledMaxDate",
          "attribute": "disabledMaxDate",
          "description": "Maximum date for disabled dates (format: yyyy/mm/dd)"
        },
        {
          "name": "multiYear",
          "attribute": "multiYear",
          "description": "Amount of years to go before and after the current date",
          "type": "number",
          "default": "3"
        },
        {
          "name": "previousButtonText",
          "attribute": "previousButtonText",
          "description": "Previous month button text",
          "type": "string",
          "default": "\"Previous Month\""
        },
        {
          "name": "nextButtonText",
          "attribute": "nextButtonText",
          "description": "Next month button text",
          "type": "string",
          "default": "\"Next Month\""
        },
        {
          "name": "isDayShortHand",
          "attribute": "isDayShortHand",
          "description": "Show the day of the week as a short hand, e.g. \"M\" for Monday",
          "type": "boolean"
        },
        {
          "name": "startOnMonday",
          "attribute": "startOnMonday",
          "description": "Start the day of the week on Monday",
          "type": "boolean"
        },
        {
          "name": "isSmallScreen",
          "description": "If the window is a small screen",
          "type": "boolean"
        },
        {
          "name": "isCancelled",
          "description": "Check to see if the date selections have been cancelled",
          "type": "boolean"
        },
        {
          "name": "is24HourFormat",
          "attribute": "is24HourFormat",
          "description": "Use 24 hour time format",
          "type": "boolean"
        },
        {
          "name": "timeIncrements",
          "attribute": "timeIncrements",
          "description": "Increments of time",
          "type": "number",
          "default": "30"
        },
        {
          "name": "timeStart",
          "attribute": "timeStart",
          "description": "Minimum time for between times display (24 hour format, e.g., timeStart=${16} for 4PM)",
          "type": "number"
        },
        {
          "name": "timeEnd",
          "attribute": "timeEnd",
          "description": "Maximum time for between times display (24 hour format, e.g., timeEnd=${16} for 4PM)",
          "type": "number"
        },
        {
          "name": "timeSelectorLabel",
          "attribute": "timeSelectorLabel",
          "description": "Time selector heading label",
          "type": "string",
          "default": "\"Time\""
        },
        {
          "name": "cancelLabel",
          "attribute": "cancelLabel",
          "description": "Cancel button label",
          "type": "string",
          "default": "\"Cancel\""
        },
        {
          "name": "submitLabel",
          "attribute": "submitLabel",
          "description": "Submit button label",
          "type": "string",
          "default": "\"Apply\""
        },
        {
          "name": "disabledSubmit",
          "description": "The submit button's attribute",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "popup",
          "description": "Query the popup",
          "type": "HTMLElement"
        },
        {
          "name": "timeSelectorList",
          "description": "Query the time selector",
          "type": "SLTimeSelectorList"
        },
        {
          "name": "textField",
          "description": "Query the text field",
          "type": "SLTextField"
        },
        {
          "name": "handleOnClickOutside"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-dialog",
      "path": "./components/dialog/dialog.ts",
      "description": "Component: sl-dialog\n\nDialog informs users about a task and can contain critical information, require decisions, or involve multiple tasks.\n- **slot**: The main body of the dialog\n- **slot** \"header\": The header of the dialog that appears above the main slot\n- **slot** \"footer\": The footer of the dialog that appears below the main slot",
      "attributes": [
        {
          "name": "heading",
          "description": "Heading text that appears in the header region",
          "type": "string"
        },
        {
          "name": "isActive",
          "description": "Is active?\n- **true** Shows the dialog container\n- **false** Hides the dialog container",
          "type": "boolean"
        },
        {
          "name": "ariaLabelledBy",
          "description": "Aria Labelled By attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "hasBackdrop",
          "description": "Has backdrop?\n- **true** Displays a dimmed background behind the dialog container\n- **false** Hides the dimmed background behind the dialog container",
          "type": "boolean"
        },
        {
          "name": "disableClickOutside",
          "description": "Disable click outside\n- **true** Disables closing the dialog on click outside of the dialog container\n- **false** Enables closing the dialog on click outside of the dialog container",
          "type": "boolean"
        },
        {
          "name": "width",
          "description": "The width of the dialog container\n- If no value is entered, it defaults to 432px",
          "type": "number"
        },
        {
          "name": "transitionDelay",
          "description": "Number of ms of the dialog's open/close css transition delay\n- Used to delay focus trap activation",
          "type": "number",
          "default": "400"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-dialog\""
        },
        {
          "name": "heading",
          "attribute": "heading",
          "description": "Heading text that appears in the header region",
          "type": "string"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Is active?\n- **true** Shows the dialog container\n- **false** Hides the dialog container",
          "type": "boolean"
        },
        {
          "name": "ariaLabelledBy",
          "attribute": "ariaLabelledBy",
          "description": "Aria Labelled By attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "hasBackdrop",
          "attribute": "hasBackdrop",
          "description": "Has backdrop?\n- **true** Displays a dimmed background behind the dialog container\n- **false** Hides the dimmed background behind the dialog container",
          "type": "boolean"
        },
        {
          "name": "disableClickOutside",
          "attribute": "disableClickOutside",
          "description": "Disable click outside\n- **true** Disables closing the dialog on click outside of the dialog container\n- **false** Enables closing the dialog on click outside of the dialog container",
          "type": "boolean"
        },
        {
          "name": "width",
          "attribute": "width",
          "description": "The width of the dialog container\n- If no value is entered, it defaults to 432px",
          "type": "number"
        },
        {
          "name": "transitionDelay",
          "attribute": "transitionDelay",
          "description": "Number of ms of the dialog's open/close css transition delay\n- Used to delay focus trap activation",
          "type": "number",
          "default": "400"
        },
        {
          "name": "dialogContainer",
          "description": "Query the dialog container",
          "type": "HTMLElement"
        },
        {
          "name": "dialogHeading",
          "description": "Query the dialog heading"
        },
        {
          "name": "closeButton",
          "description": "Query the dialog close button"
        },
        {
          "name": "dialogTrigger",
          "description": "Query the dialog trigger",
          "type": "array"
        },
        {
          "name": "dialogTriggerButton",
          "description": "Query the dialog trigger inner element"
        },
        {
          "name": "handleOnClickOutside"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-divider",
      "path": "./components/divider/divider.ts",
      "description": "Component: sl-divider\n\nA divider is a thin line that groups content in lists and layouts.",
      "attributes": [
        {
          "name": "variant",
          "description": "Variant\n- **default** A divider the displays horizontally\n- **vertical** A divider the displays vertically",
          "type": "\"vertical\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-divider\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant\n- **default** A divider the displays horizontally\n- **vertical** A divider the displays vertically",
          "type": "\"vertical\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-drawer",
      "path": "./components/drawer/drawer.ts",
      "description": "Component: sl-drawer\n\nDrawer provides ergonomic access to context-sensitive actions and information.\n- **slot**: The drawer content",
      "attributes": [
        {
          "name": "alignment",
          "description": "Alignment\n- **right** Aligns the drawer to the right of the viewport",
          "type": "\"right\""
        },
        {
          "name": "width",
          "description": "width of drawer panel when expanded / collapsed as side panel",
          "type": "number"
        },
        {
          "name": "hasBackdrop",
          "description": "Fade/ghost back the page background content",
          "type": "boolean"
        },
        {
          "name": "isActive",
          "description": "Is active?\n- **true** Shows the drawer container\n- **false** Hides the drawer container",
          "type": "boolean"
        },
        {
          "name": "ariaLabelledBy",
          "description": "Aria Labelled By attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "disableBackdropClick",
          "description": "Disable to close the drawer on outside click",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-drawer\""
        },
        {
          "name": "alignment",
          "attribute": "alignment",
          "description": "Alignment\n- **right** Aligns the drawer to the right of the viewport",
          "type": "\"right\""
        },
        {
          "name": "width",
          "attribute": "width",
          "description": "width of drawer panel when expanded / collapsed as side panel",
          "type": "number"
        },
        {
          "name": "hasBackdrop",
          "attribute": "hasBackdrop",
          "description": "Fade/ghost back the page background content",
          "type": "boolean"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Is active?\n- **true** Shows the drawer container\n- **false** Hides the drawer container",
          "type": "boolean"
        },
        {
          "name": "ariaLabelledBy",
          "attribute": "ariaLabelledBy",
          "description": "Aria Labelled By attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "disableBackdropClick",
          "attribute": "disableBackdropClick",
          "description": "Disable to close the drawer on outside click",
          "type": "boolean"
        },
        {
          "name": "closeButton",
          "description": "Query the drawer close button"
        },
        {
          "name": "drawerTrigger",
          "description": "Query the drawer trigger",
          "type": "array"
        },
        {
          "name": "drawerTriggerButton",
          "description": "Query the drawer trigger inner element"
        },
        {
          "name": "handleOnClickOutside"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-dropdown-panel",
      "path": "./components/dropdown-panel/dropdown-panel.ts",
      "description": "Component: sl-dropdown-panel\n\nDropdown Panel provides overlay and show/hide functionality to the dropdown's list of options.\n- **slot**: The dropdown panel content",
      "attributes": [
        {
          "name": "hasScroll",
          "description": "Adds a max height and scrolling of the panel",
          "type": "boolean"
        },
        {
          "name": "hasHeader",
          "description": "Changes styling on panel for variant with header",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hasFooter",
          "description": "Changes styling on panel for variant with footer",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-dropdown-panel\""
        },
        {
          "name": "hasScroll",
          "attribute": "hasScroll",
          "description": "Adds a max height and scrolling of the panel",
          "type": "boolean"
        },
        {
          "name": "hasHeader",
          "attribute": "hasHeader",
          "description": "Changes styling on panel for variant with header",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hasFooter",
          "attribute": "hasFooter",
          "description": "Changes styling on panel for variant with footer",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-dropdown",
      "path": "./components/dropdown/dropdown.ts",
      "description": "Component: sl-dropdown\n\nDropdown presents a list of options from which a user can select one.\n- **slot**: The dropdown content\n- **slot** \"field-note\": If content is slotted, it will display in place of the fieldNote property\n- **slot** \"error\": If content is slotted, it will display in place of the errorNote property",
      "attributes": [
        {
          "name": "isActive",
          "description": "is Active",
          "type": "boolean"
        },
        {
          "name": "isActiveDropdown",
          "description": "is Active dropdown\n1. Dropdown is open when set to true. Close when set to false",
          "type": "boolean"
        },
        {
          "name": "fieldId",
          "description": "The unique id of the select field",
          "type": "string"
        },
        {
          "name": "title",
          "description": "The select field's title",
          "type": "string"
        },
        {
          "name": "label",
          "description": "The select field's label",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "name",
          "description": "The select field's name attribute",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The select field's value attribute",
          "type": "string"
        },
        {
          "name": "placeholder",
          "description": "Placeholder attribute\n- Specifies a short hint that describes the expected value of an <input> element",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "The dropdown field note",
          "type": "string"
        },
        {
          "name": "errorNote",
          "description": "The dropdown error note",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Aria describedby\n1. Used to connect the field note in select field to the select menu for accessibility",
          "type": "string"
        },
        {
          "name": "isRequired",
          "description": "The select field's required attribute",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "isOptional",
          "description": "Optional state\n- Specifies that a field is optional and adds the text 'optional' to the label",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "The select field's disabled attribute",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Error state",
          "type": "boolean"
        },
        {
          "name": "isReadonly",
          "description": "Readonly attribute\n- Specifies that an input field is read-only",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "hideLabel",
          "description": "Hide the label?",
          "type": "boolean"
        },
        {
          "name": "hasSearch",
          "description": "Add a search input to the dropdown panel",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "align",
          "description": "**Dropdown alignment**\n- **bottom** Dropdown panel appears on the bottom\n- **top** Dropdown panel appears on the top",
          "type": "\"bottom\" | \"top\"",
          "default": "\"bottom\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-dropdown\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "is Active",
          "type": "boolean"
        },
        {
          "name": "isActiveDropdown",
          "attribute": "isActiveDropdown",
          "description": "is Active dropdown\n1. Dropdown is open when set to true. Close when set to false",
          "type": "boolean"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The unique id of the select field",
          "type": "string"
        },
        {
          "name": "title",
          "attribute": "title",
          "description": "The select field's title",
          "type": "string"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "The select field's label",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "dataSource",
          "description": "Dropdown Datasource",
          "type": "PartialDataSource[]"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "The select field's name attribute",
          "type": "string"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The select field's value attribute",
          "type": "string"
        },
        {
          "name": "placeholder",
          "attribute": "placeholder",
          "description": "Placeholder attribute\n- Specifies a short hint that describes the expected value of an <input> element",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "The dropdown field note",
          "type": "string"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "The dropdown error note",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Aria describedby\n1. Used to connect the field note in select field to the select menu for accessibility",
          "type": "string"
        },
        {
          "name": "isRequired",
          "attribute": "isRequired",
          "description": "The select field's required attribute",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "isOptional",
          "attribute": "isOptional",
          "description": "Optional state\n- Specifies that a field is optional and adds the text 'optional' to the label",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "The select field's disabled attribute",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state",
          "type": "boolean"
        },
        {
          "name": "isReadonly",
          "attribute": "isReadonly",
          "description": "Readonly attribute\n- Specifies that an input field is read-only",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "hideLabel",
          "attribute": "hideLabel",
          "description": "Hide the label?",
          "type": "boolean"
        },
        {
          "name": "hasSearch",
          "attribute": "hasSearch",
          "description": "Add a search input to the dropdown panel",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "align",
          "attribute": "align",
          "description": "**Dropdown alignment**\n- **bottom** Dropdown panel appears on the bottom\n- **top** Dropdown panel appears on the top",
          "type": "\"bottom\" | \"top\"",
          "default": "\"bottom\""
        },
        {
          "name": "listItems",
          "description": "Query all the list items",
          "type": "SLListItem[]"
        },
        {
          "name": "handleOnClickOutside"
        },
        {
          "name": "handleOnChange"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-field-note",
      "path": "./components/field-note/field-note.ts",
      "description": "Component: sl-field-note\n\nField note is used as helper text for any type of input field.\n- **slot**: The field note content",
      "attributes": [
        {
          "name": "isError",
          "description": "Error state\n1. Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute\n1. Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-field-note\""
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state\n1. Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute\n1. Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-file-upload",
      "path": "./components/file-upload/file-upload.ts",
      "description": "Component: sl-file-upload\n\nFile Upload provides a way for users to upload files from their operating system.\n- **slot**: The component's content",
      "attributes": [
        {
          "name": "fieldId",
          "description": "Unique ID of the field",
          "type": "string"
        },
        {
          "name": "label",
          "description": "Label for the form field",
          "type": "string"
        },
        {
          "name": "name",
          "description": "Name attribute for the checkbox",
          "type": "string"
        },
        {
          "name": "value",
          "description": "Value associated with the field",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "Text for the field note",
          "type": "string"
        },
        {
          "name": "errorNote",
          "description": "Text for the error note",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Aria described-by attribute\n- Connects the field note in the select field to the select menu for accessibility",
          "type": "string"
        },
        {
          "name": "isRequired",
          "description": "Indicates if the field is required",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Indicates if the field is disabled",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Indicates if the field note is in error state",
          "type": "boolean"
        },
        {
          "name": "hideLabel",
          "description": "Indicates if the label is hidden",
          "type": "boolean"
        },
        {
          "name": "textConfig",
          "description": "Configuration for text messages in file upload\n- Specifies error text for unsupported file formats and size exceeded messages",
          "type": "FileUploadTextConfig",
          "default": "{\"fileFormatErrorText\":\"fileFormatErrorText\",\"fileSizeErrorText\":\"fileSizeErrorText\"}"
        },
        {
          "name": "uploadFiles",
          "description": "Files to be uploaded from the application\n- Represents the status of the files",
          "type": "FileUploadProgressStream[]"
        },
        {
          "name": "uploadTime",
          "description": "Time taken for uploading\n- Defaults to 1 second",
          "type": "number",
          "default": "1"
        },
        {
          "name": "fileSizeLimit",
          "description": "Maximum file size allowed for upload in MB",
          "type": "number",
          "default": "75"
        },
        {
          "name": "accept",
          "description": "Acceptable file types for upload\n- Example: '.jpg, .png, .gif'",
          "type": "string"
        },
        {
          "name": "multiple",
          "description": "Allows multiple files to be added to the file upload",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-file-upload\""
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "Unique ID of the field",
          "type": "string"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Label for the form field",
          "type": "string"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Name attribute for the checkbox",
          "type": "string"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "Value associated with the field",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Text for the field note",
          "type": "string"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "Text for the error note",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Aria described-by attribute\n- Connects the field note in the select field to the select menu for accessibility",
          "type": "string"
        },
        {
          "name": "isRequired",
          "attribute": "isRequired",
          "description": "Indicates if the field is required",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Indicates if the field is disabled",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Indicates if the field note is in error state",
          "type": "boolean"
        },
        {
          "name": "isDragging",
          "description": "Dragging state for the field",
          "type": "boolean"
        },
        {
          "name": "hideLabel",
          "attribute": "hideLabel",
          "description": "Indicates if the label is hidden",
          "type": "boolean"
        },
        {
          "name": "filesState",
          "description": "State containing files",
          "type": "filesStateConfig[]"
        },
        {
          "name": "textConfig",
          "attribute": "textConfig",
          "description": "Configuration for text messages in file upload\n- Specifies error text for unsupported file formats and size exceeded messages",
          "type": "FileUploadTextConfig",
          "default": "{\"fileFormatErrorText\":\"fileFormatErrorText\",\"fileSizeErrorText\":\"fileSizeErrorText\"}"
        },
        {
          "name": "uploadFiles",
          "attribute": "uploadFiles",
          "description": "Files to be uploaded from the application\n- Represents the status of the files",
          "type": "FileUploadProgressStream[]"
        },
        {
          "name": "uploadTime",
          "attribute": "uploadTime",
          "description": "Time taken for uploading\n- Defaults to 1 second",
          "type": "number",
          "default": "1"
        },
        {
          "name": "fileSizeLimit",
          "attribute": "fileSizeLimit",
          "description": "Maximum file size allowed for upload in MB",
          "type": "number",
          "default": "75"
        },
        {
          "name": "accept",
          "attribute": "accept",
          "description": "Acceptable file types for upload\n- Example: '.jpg, .png, .gif'",
          "type": "string"
        },
        {
          "name": "multiple",
          "attribute": "multiple",
          "description": "Allows multiple files to be added to the file upload",
          "type": "boolean"
        },
        {
          "name": "handleOnDragOver"
        },
        {
          "name": "handleOnDragEnd"
        },
        {
          "name": "handleOnFileChange"
        },
        {
          "name": "handleOnFileRemove"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-focus-trap",
      "path": "./components/focus-trap/focus-trap.ts",
      "description": "Component: sl-focus-trap\n\nFocus Trap is used as a wrapper around dialogs, popovers, and other overlays to trap focus within them, enabling accessible keyboard navigation.\n\n- **slot**: The content to trap in the focus trap",
      "attributes": [
        {
          "name": "isActive",
          "description": "Is the focus trap active?",
          "type": "boolean"
        },
        {
          "name": "delay",
          "description": "Delay in milliseconds before the focus trap is activated. \n- Can be set by the component using focus trap, when there is a css transition that needs to complete before the focus trap activates.",
          "type": "number",
          "default": "0"
        },
        {
          "name": "firstFocusableEl",
          "description": "First element that can recieve focus in the focus trap (e.g. button, input, a, etc.).",
          "type": "HTMLElement"
        },
        {
          "name": "lastFocusableEl",
          "description": "Last element that can recieve focus in the focus trap (e.g. button, input, a, etc.).",
          "type": "HTMLElement"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-focus-trap\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Is the focus trap active?",
          "type": "boolean"
        },
        {
          "name": "delay",
          "attribute": "delay",
          "description": "Delay in milliseconds before the focus trap is activated. \n- Can be set by the component using focus trap, when there is a css transition that needs to complete before the focus trap activates.",
          "type": "number",
          "default": "0"
        },
        {
          "name": "firstFocusableEl",
          "attribute": "firstFocusableEl",
          "description": "First element that can recieve focus in the focus trap (e.g. button, input, a, etc.).",
          "type": "HTMLElement"
        },
        {
          "name": "lastFocusableEl",
          "attribute": "lastFocusableEl",
          "description": "Last element that can recieve focus in the focus trap (e.g. button, input, a, etc.).",
          "type": "HTMLElement"
        },
        {
          "name": "slottedContent",
          "description": "Slotted elements contain the component that will be included in the focus trap.",
          "type": "HTMLElement[]"
        },
        {
          "name": "trapFocusEnd"
        },
        {
          "name": "trapFocusStart"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-grid-item",
      "path": "./components/grid-item/grid-item.ts",
      "description": "- **slot**: The content of the grid item",
      "attributes": [
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-grid-item\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-grid",
      "path": "./components/grid/grid.ts",
      "description": "Component: sl-grid\n\nGrid provides a responsive layout that adapts to screen size and orientation, ensuring consistency across devices.\n- **slot**: The grid items",
      "attributes": [
        {
          "name": "variant",
          "description": "Style variant\n- **side-by-side** yields a grid whose grid items display side-by-side (2 per row) on all screen sizes\n- **2up** yields a grid whose grid items are stacked on small screens but display side-by-side when enough screen real estate is available to do so\n- **2-3up** yields a grid whose grid items display side-by-side (2 per row) on small screens and 3 per row on md/lg screens\n- **3up** yields a grid whose grid items are stacked on small screens, transforms to a 2-across pattern and then transforms again to a 3-across pattern\n- **1-3up** yields a grid whose grid items are stacked on small screens and transforms to a 3-across pattern on larger screens\n- **4up** yields a grid whose grid items are stacked on small screens, transforms to a 2-across pattern, transforms again to a 3-across pattern, and ultimately transforms to a 4-across pattern\n- **2-3-4up** yields a grid whose grid items are 2-across on small screens, 3-across on medium screens, and ultimately transforms to a 4-across pattern on  lg screens\n- **2-4up** yields a grid whose grid items are 2-across on small screens and ultimately transforms to a 4-across pattern on md/lg screens\n- **1-2-4up** yields a grid whose grid items are stacked on small screens, transforms to a 2-across pattern, and ultimately transforms to a 4-across pattern\n- **1-4up** yields a grid whose grid items are stacked on small screens, transforms to a 4-across pattern on medium/large screens\n- **2-4-5up** yields a grid whose grid items are 2-across on small screens, 4-across pattern on md screens, and 5up on large screens\n- **5up** yields a grid whose grid items are stacked on small screens, 2up on sm/md screens, 3up on md screens, 4up on md/lg screens, then 5up on lg screens\n- **2-3-4-5up** yields a grid whose grid items are  2up on sm/md screens, 3up on md screens, 4up on md/lg screens, then 5up on lg screens",
          "type": "\"side-by-side\" | \"2up\" | \"2-3up\" | \"3up\" | \"1-3up\" | \"2-4up\" | \"2-3-4up\" | \"4up\" | \"1-4up\" | \"1-2-4up\" | \"2-4-5up\" | \"2-3-4-5up\" | \"5up\" | \"2-4-6up\""
        },
        {
          "name": "gap",
          "description": "Style variant\n- **none** yields a grid whose grid items are spaced without any gutter in between\n- **sm** yields a grid whose grid items are spaced with a gap smaller than the default\n- **lg** yields a grid whose grid items are spaced with a gap larger than the default",
          "type": "\"sm\" | \"none\" | \"lg\""
        },
        {
          "name": "break",
          "description": "Break variant\n-  **faster** breaks the grid at a smaller width than the default. Example: 2up grid breaks to 2 per row at smaller width than default\n-  **slower** breaks the grid at a larger width than the default. Example: 2up grid breaks to 2 per row at larger width than default\n-  **none** the grid does not break.",
          "type": "\"none\" | \"faster\" | \"slower\""
        },
        {
          "name": "separators",
          "description": "Separators\n1. Adds lines between items",
          "type": "boolean"
        },
        {
          "name": "height",
          "description": "Height variant\n- **auto** Prevents the grid from stretching so the grid items are staggered in height",
          "type": "\"auto\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-grid\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variant\n- **side-by-side** yields a grid whose grid items display side-by-side (2 per row) on all screen sizes\n- **2up** yields a grid whose grid items are stacked on small screens but display side-by-side when enough screen real estate is available to do so\n- **2-3up** yields a grid whose grid items display side-by-side (2 per row) on small screens and 3 per row on md/lg screens\n- **3up** yields a grid whose grid items are stacked on small screens, transforms to a 2-across pattern and then transforms again to a 3-across pattern\n- **1-3up** yields a grid whose grid items are stacked on small screens and transforms to a 3-across pattern on larger screens\n- **4up** yields a grid whose grid items are stacked on small screens, transforms to a 2-across pattern, transforms again to a 3-across pattern, and ultimately transforms to a 4-across pattern\n- **2-3-4up** yields a grid whose grid items are 2-across on small screens, 3-across on medium screens, and ultimately transforms to a 4-across pattern on  lg screens\n- **2-4up** yields a grid whose grid items are 2-across on small screens and ultimately transforms to a 4-across pattern on md/lg screens\n- **1-2-4up** yields a grid whose grid items are stacked on small screens, transforms to a 2-across pattern, and ultimately transforms to a 4-across pattern\n- **1-4up** yields a grid whose grid items are stacked on small screens, transforms to a 4-across pattern on medium/large screens\n- **2-4-5up** yields a grid whose grid items are 2-across on small screens, 4-across pattern on md screens, and 5up on large screens\n- **5up** yields a grid whose grid items are stacked on small screens, 2up on sm/md screens, 3up on md screens, 4up on md/lg screens, then 5up on lg screens\n- **2-3-4-5up** yields a grid whose grid items are  2up on sm/md screens, 3up on md screens, 4up on md/lg screens, then 5up on lg screens",
          "type": "\"side-by-side\" | \"2up\" | \"2-3up\" | \"3up\" | \"1-3up\" | \"2-4up\" | \"2-3-4up\" | \"4up\" | \"1-4up\" | \"1-2-4up\" | \"2-4-5up\" | \"2-3-4-5up\" | \"5up\" | \"2-4-6up\""
        },
        {
          "name": "gap",
          "attribute": "gap",
          "description": "Style variant\n- **none** yields a grid whose grid items are spaced without any gutter in between\n- **sm** yields a grid whose grid items are spaced with a gap smaller than the default\n- **lg** yields a grid whose grid items are spaced with a gap larger than the default",
          "type": "\"sm\" | \"none\" | \"lg\""
        },
        {
          "name": "break",
          "attribute": "break",
          "description": "Break variant\n-  **faster** breaks the grid at a smaller width than the default. Example: 2up grid breaks to 2 per row at smaller width than default\n-  **slower** breaks the grid at a larger width than the default. Example: 2up grid breaks to 2 per row at larger width than default\n-  **none** the grid does not break.",
          "type": "\"none\" | \"faster\" | \"slower\""
        },
        {
          "name": "separators",
          "attribute": "separators",
          "description": "Separators\n1. Adds lines between items",
          "type": "boolean"
        },
        {
          "name": "height",
          "attribute": "height",
          "description": "Height variant\n- **auto** Prevents the grid from stretching so the grid items are staggered in height",
          "type": "\"auto\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-header",
      "path": "./components/header/header.ts",
      "description": "Component: sl-header",
      "attributes": [
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-header\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The components content"
        }
      ]
    },
    {
      "name": "sl-heading",
      "path": "./components/heading/heading.ts",
      "description": "Component: sl-heading\n\nHeading is used to render semantic heading tags with specific styles.\n- **slot**: The heading content",
      "attributes": [
        {
          "name": "variant",
          "description": "Heading variants\n- **default** renders a heading with the XL font styles\n- **sm** renders a heading with the SM font styles\n- **md** renders a heading with the MD font styles\n- **lg** renders a heading with the LG font styles\n- **display-sm** renders a heading with the Display SM font styles\n- **display-md** renders a heading with the Display MD font styles\n- **display-lg** renders a heading with the Display LG font styles",
          "type": "\"sm\" | \"lg\" | \"display-lg\" | \"display-md\" | \"display-sm\" | \"md\""
        },
        {
          "name": "tagName",
          "description": "Heading tag name\n- **h1** renders an `h1` tag\n- **h2** renders an `h2` tag, this is the default\n- **h3** renders an `h3` tag\n- **h4** renders an `h4` tag\n- **h5** renders an `h5` tag\n- **h6** renders an `h6` tag",
          "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "default": "\"h2\""
        },
        {
          "name": "isBold",
          "description": "Is bold?\n- **true** Renders the heading with semibold font weight\n- **false** Renders the heading with regular font weight",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-heading\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Heading variants\n- **default** renders a heading with the XL font styles\n- **sm** renders a heading with the SM font styles\n- **md** renders a heading with the MD font styles\n- **lg** renders a heading with the LG font styles\n- **display-sm** renders a heading with the Display SM font styles\n- **display-md** renders a heading with the Display MD font styles\n- **display-lg** renders a heading with the Display LG font styles",
          "type": "\"sm\" | \"lg\" | \"display-lg\" | \"display-md\" | \"display-sm\" | \"md\""
        },
        {
          "name": "tagName",
          "attribute": "tagName",
          "description": "Heading tag name\n- **h1** renders an `h1` tag\n- **h2** renders an `h2` tag, this is the default\n- **h3** renders an `h3` tag\n- **h4** renders an `h4` tag\n- **h5** renders an `h5` tag\n- **h6** renders an `h6` tag",
          "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "default": "\"h2\""
        },
        {
          "name": "isBold",
          "attribute": "isBold",
          "description": "Is bold?\n- **true** Renders the heading with semibold font weight\n- **false** Renders the heading with regular font weight",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-icon",
      "path": "./components/icon/icon.ts",
      "description": "Component: sl-icon-[ICON_NAME]\n\nIcons are symbols that provide meaning. Icon component is used to display any icon from the Altitude icon library.",
      "attributes": [
        {
          "name": "iconTitle",
          "description": "Icon title",
          "type": "string"
        },
        {
          "name": "size",
          "description": "Icon size\n- Default size is 16px\n- **md** renders a larger size than default (20px)\n- **lg** renders a larger size than the md variant (24px)\n- **xl** renders a larger size than the lg variant (32px)\n- **xxl** renders a larger size than the lg variant (36px)\n- **xxxl** renders a larger size than the lg variant (40px)",
          "type": "\"lg\" | \"md\" | \"xl\" | \"xxl\" | \"xxxl\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-icon\""
        },
        {
          "name": "iconTitle",
          "attribute": "iconTitle",
          "description": "Icon title",
          "type": "string"
        },
        {
          "name": "size",
          "attribute": "size",
          "description": "Icon size\n- Default size is 16px\n- **md** renders a larger size than default (20px)\n- **lg** renders a larger size than the md variant (24px)\n- **xl** renders a larger size than the lg variant (32px)\n- **xxl** renders a larger size than the lg variant (36px)\n- **xxxl** renders a larger size than the lg variant (40px)",
          "type": "\"lg\" | \"md\" | \"xl\" | \"xxl\" | \"xxxl\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-input-stepper",
      "path": "./components/input-stepper/input-stepper.ts",
      "description": "Component: sl-input-stepper\n\nInput Stepper lets users enter a numeric value and incrementally increase or decrease the value with a two-segment control.\n- **slot** \"field-note\": If content is slotted, it will display in place of the fieldNote property\n- **slot** \"error\": If content is slotted, it will display in place of the errorNote property",
      "attributes": [
        {
          "name": "fieldId",
          "description": "The unique id of the field",
          "type": "string"
        },
        {
          "name": "label",
          "description": "The form field's label",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "hideLabel",
          "description": "Hide label?",
          "type": "boolean"
        },
        {
          "name": "name",
          "description": "Checkbox name attribute property",
          "type": "string"
        },
        {
          "name": "value",
          "description": "Value",
          "type": "number"
        },
        {
          "name": "fieldNote",
          "description": "Fieldnote text",
          "type": "string"
        },
        {
          "name": "errorNote",
          "description": "Errornote text",
          "type": "string"
        },
        {
          "name": "min",
          "description": "Add button icon name",
          "type": "number"
        },
        {
          "name": "max",
          "description": "Add button icon name",
          "type": "number"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Aria describedby\n1) Used to connect the field note in select field to the select menu for accessibility",
          "type": "string"
        },
        {
          "name": "isRequired",
          "description": "Required attribute",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "isReadonly",
          "description": "Readonly attribute",
          "type": "boolean"
        },
        {
          "name": "placeholder",
          "description": "Placeholder text",
          "type": "string"
        },
        {
          "name": "isError",
          "description": "Error state",
          "type": "boolean"
        },
        {
          "name": "count",
          "description": "Count state",
          "type": "number",
          "default": "0"
        },
        {
          "name": "step",
          "description": "Inremental/Decremental range",
          "type": "number",
          "default": "1"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-input-stepper\""
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The unique id of the field",
          "type": "string"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "The form field's label",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "hideLabel",
          "attribute": "hideLabel",
          "description": "Hide label?",
          "type": "boolean"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Checkbox name attribute property",
          "type": "string"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "Value",
          "type": "number"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Fieldnote text",
          "type": "string"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "Errornote text",
          "type": "string"
        },
        {
          "name": "min",
          "attribute": "min",
          "description": "Add button icon name",
          "type": "number"
        },
        {
          "name": "max",
          "attribute": "max",
          "description": "Add button icon name",
          "type": "number"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Aria describedby\n1) Used to connect the field note in select field to the select menu for accessibility",
          "type": "string"
        },
        {
          "name": "isRequired",
          "attribute": "isRequired",
          "description": "Required attribute",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "isReadonly",
          "attribute": "isReadonly",
          "description": "Readonly attribute",
          "type": "boolean"
        },
        {
          "name": "placeholder",
          "attribute": "placeholder",
          "description": "Placeholder text",
          "type": "string"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state",
          "type": "boolean"
        },
        {
          "name": "count",
          "attribute": "count",
          "description": "Count state",
          "type": "number",
          "default": "0"
        },
        {
          "name": "step",
          "attribute": "step",
          "description": "Inremental/Decremental range",
          "type": "number",
          "default": "1"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-layout-container",
      "path": "./components/layout-container/layout-container.ts",
      "description": "Component: sl-layout-container\n\nLayout Container caps the width of content sections and centers content within it.",
      "attributes": [
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-layout-container\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-layout-section",
      "path": "./components/layout-section/layout-section.ts",
      "description": "Component: sl-layout-section",
      "attributes": [
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-layout-section\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-layout",
      "path": "./components/layout/layout.ts",
      "description": "Component: sl-layout\n\nLayout provides a responsive structure for content that ensures consistency across an application.",
      "attributes": [
        {
          "name": "gap",
          "description": "Gap variant (Default is 16px)\n- **none** yields a layout whose layout sections are spaced without any gutter in between on large screens.\n- **sm** yields a layout whose layout sections are spaced 8px apart on large screens. Small screens gutters move to 16px between.\n- **lg** yields a layout whose layout sections are spaced 24px apart on large screens. Small screens gutters move to 16px between.\n- **xl** yields a layout whose layout sections are spaced 32px apart on large screens. Small screens gutters move to 16px between.",
          "type": "\"sm\" | \"none\" | \"lg\" | \"xl\""
        },
        {
          "name": "variant",
          "description": "Style variants\n- **sidebar-left** formats the first `layout-section` component as a left sidebar\n- **sidebar-right** formats the second `layout-section` component as a right sidebar",
          "type": "\"sidebar-left\" | \"sidebar-right\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-layout\""
        },
        {
          "name": "gap",
          "attribute": "gap",
          "description": "Gap variant (Default is 16px)\n- **none** yields a layout whose layout sections are spaced without any gutter in between on large screens.\n- **sm** yields a layout whose layout sections are spaced 8px apart on large screens. Small screens gutters move to 16px between.\n- **lg** yields a layout whose layout sections are spaced 24px apart on large screens. Small screens gutters move to 16px between.\n- **xl** yields a layout whose layout sections are spaced 32px apart on large screens. Small screens gutters move to 16px between.",
          "type": "\"sm\" | \"none\" | \"lg\" | \"xl\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variants\n- **sidebar-left** formats the first `layout-section` component as a left sidebar\n- **sidebar-right** formats the second `layout-section` component as a right sidebar",
          "type": "\"sidebar-left\" | \"sidebar-right\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-link",
      "path": "./components/link/link.ts",
      "description": "Component: sl-link\n\nLink provides consistent formatting to navigational elements.\n- **slot**: The link text",
      "attributes": [
        {
          "name": "href",
          "description": "The link URL",
          "type": "string"
        },
        {
          "name": "variant",
          "description": "Variant\n- **default** renders a link with the sl-theme-typography-body-md preset\n- **xs** renders a link with the sl-theme-typography-body-xs preset\n- **sm** renders a link with the sl-theme-typography-body-sm preset\n- **lg** renders a link with the sl-theme-typography-body-lg preset\n</cat-text-passage>",
          "type": "\"sm\" | \"lg\" | \"xs\""
        },
        {
          "name": "target",
          "description": "Target attribute for a link (i.e. set to _blank to open in new tab)\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one. This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one. If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context. If there is no parent, this behaves the same way as _self.",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\""
        },
        {
          "name": "label",
          "description": "Aria label attribute\n- Optional aria-label for a11y\n- Most screen readers will read out loud the aria-label attribute in place of the link text. This is used for links that have text such as 'Learn more' or 'Read more'.",
          "type": "string"
        },
        {
          "name": "ariaLabelledBy",
          "description": "Aria Labelled By attribute\n- Optional aria-labelledby for a11y\n- There may be instances where a nearby headline can act is the perfect label for a general link.",
          "type": "string"
        },
        {
          "name": "linkTitle",
          "description": "Title attribute\n- Optional title for a11y\n- If a link opens a new window or performs an action, use the title attribute to provide a tooltip with additional information.",
          "type": "string"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-link\""
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "The link URL",
          "type": "string"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant\n- **default** renders a link with the sl-theme-typography-body-md preset\n- **xs** renders a link with the sl-theme-typography-body-xs preset\n- **sm** renders a link with the sl-theme-typography-body-sm preset\n- **lg** renders a link with the sl-theme-typography-body-lg preset\n</cat-text-passage>",
          "type": "\"sm\" | \"lg\" | \"xs\""
        },
        {
          "name": "target",
          "attribute": "target",
          "description": "Target attribute for a link (i.e. set to _blank to open in new tab)\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one. This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one. If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context. If there is no parent, this behaves the same way as _self.",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\""
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Aria label attribute\n- Optional aria-label for a11y\n- Most screen readers will read out loud the aria-label attribute in place of the link text. This is used for links that have text such as 'Learn more' or 'Read more'.",
          "type": "string"
        },
        {
          "name": "ariaLabelledBy",
          "attribute": "ariaLabelledBy",
          "description": "Aria Labelled By attribute\n- Optional aria-labelledby for a11y\n- There may be instances where a nearby headline can act is the perfect label for a general link.",
          "type": "string"
        },
        {
          "name": "linkTitle",
          "attribute": "linkTitle",
          "description": "Title attribute\n- Optional title for a11y\n- If a link opens a new window or performs an action, use the title attribute to provide a tooltip with additional information.",
          "type": "string"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-list-item",
      "path": "./components/list-item/list-item.ts",
      "description": "Component: sl-list-item\n\nList Item is a single item in a list.\n- **slot**: The content of the list item",
      "attributes": [
        {
          "name": "variant",
          "description": "Variants\n- **static** renders a list item that isn't interactive. Use for typeahead dropdowns",
          "type": "\"static\""
        },
        {
          "name": "isError",
          "description": "Error state\n1. Changes the component's treatment to represent an error",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "behavior",
          "description": "Target attribute for a link (i.e. set to _blank to open in new tab)\n- **flyout** changes the nested items into flyout menus",
          "type": "\"flyout\""
        },
        {
          "name": "flyoutPosition",
          "description": "Flyout position (only use with flyout behavior)\n- **left** positions the flyout menu to the left of the item trigger\n- **bottom** positions the flyout menu below the item trigger",
          "type": "\"left\" | \"bottom\" | \"top\""
        },
        {
          "name": "href",
          "description": "URL if this is an <a> element - this swaps <button> for <a>",
          "type": "string"
        },
        {
          "name": "value",
          "description": "Value for a list item that needs to return a value to an input in a dropdown. This is required for search-form/drop-down.\nValue can be a string or object ({lable, value} pair)",
          "type": "string | { [key: string]: unknown; label: string; value: any; }"
        },
        {
          "name": "isActive",
          "description": "Active state",
          "type": "boolean"
        },
        {
          "name": "isCurrent",
          "description": "Current state",
          "type": "boolean"
        },
        {
          "name": "onClick",
          "description": "Disabled attribute",
          "type": "() => void"
        },
        {
          "name": "target",
          "description": "Target attribute for a link (i.e. set to _blank to open in new tab)\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one. This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context. If there is no parent, this behaves the same way as _self.",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-list-item\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variants\n- **static** renders a list item that isn't interactive. Use for typeahead dropdowns",
          "type": "\"static\""
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state\n1. Changes the component's treatment to represent an error",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "behavior",
          "attribute": "behavior",
          "description": "Target attribute for a link (i.e. set to _blank to open in new tab)\n- **flyout** changes the nested items into flyout menus",
          "type": "\"flyout\""
        },
        {
          "name": "flyoutPosition",
          "attribute": "flyoutPosition",
          "description": "Flyout position (only use with flyout behavior)\n- **left** positions the flyout menu to the left of the item trigger\n- **bottom** positions the flyout menu below the item trigger",
          "type": "\"left\" | \"bottom\" | \"top\""
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "URL if this is an <a> element - this swaps <button> for <a>",
          "type": "string"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "Value for a list item that needs to return a value to an input in a dropdown. This is required for search-form/drop-down.\nValue can be a string or object ({lable, value} pair)",
          "type": "string | { [key: string]: unknown; label: string; value: any; }"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Active state",
          "type": "boolean"
        },
        {
          "name": "isCurrent",
          "attribute": "isCurrent",
          "description": "Current state",
          "type": "boolean"
        },
        {
          "name": "onClick",
          "attribute": "onClick",
          "description": "Disabled attribute",
          "type": "() => void"
        },
        {
          "name": "target",
          "attribute": "target",
          "description": "Target attribute for a link (i.e. set to _blank to open in new tab)\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one. This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context. If there is no parent, this behaves the same way as _self.",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\""
        },
        {
          "name": "handleOnMouseOver"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "select"
        }
      ]
    },
    {
      "name": "sl-list",
      "path": "./components/list/list.ts",
      "description": "Component: sl-list\n\nList is a vertical or horizontal grouping of related content or links.\n- **slot**: The list items",
      "attributes": [
        {
          "name": "behavior",
          "description": "Behavior\n- **overflow** turns the list into an overflow list",
          "type": "\"overflow\""
        },
        {
          "name": "orientation",
          "description": "Orientation\n- default renders a stacked list\n- **horizontal** renders the list side-by-side and wraps unless overflow is turned on",
          "type": "\"horizontal\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-list\""
        },
        {
          "name": "behavior",
          "attribute": "behavior",
          "description": "Behavior\n- **overflow** turns the list into an overflow list",
          "type": "\"overflow\""
        },
        {
          "name": "orientation",
          "attribute": "orientation",
          "description": "Orientation\n- default renders a stacked list\n- **horizontal** renders the list side-by-side and wraps unless overflow is turned on",
          "type": "\"horizontal\""
        },
        {
          "name": "isStart",
          "description": "isStart state\n1) Controls the beginning gradient on the overflow list",
          "type": "boolean"
        },
        {
          "name": "isEnd",
          "description": "isEnd state\n1) Controls the ending gradient on the overflow list",
          "type": "boolean"
        },
        {
          "name": "listItems",
          "description": "Query all the SLListItems's",
          "type": "SLListItem[]"
        },
        {
          "name": "setShadows"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-loading-indicator",
      "path": "./components/loading-indicator/loading-indicator.ts",
      "description": "Component: el-loading-indicator\n\nLoading Indicator is used when retrieving data or performing slow computations, to notify users that their action is being processed.",
      "attributes": [
        {
          "name": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean"
        },
        {
          "name": "small",
          "description": "Small loader",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-loading-indicator\""
        },
        {
          "name": "inverted",
          "attribute": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean"
        },
        {
          "name": "small",
          "attribute": "small",
          "description": "Small loader",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-menu-item",
      "path": "./components/menu-item/menu-item.ts",
      "description": "Component: sl-menu-item\n\nMenu item is a single item within a menu.\n- **slot**: The content to display in the menu item\n- **slot** \"before\": Optional prefix content to display in the menu item",
      "attributes": [
        {
          "name": "href",
          "description": "The optional menu link URL",
          "type": "string"
        },
        {
          "name": "target",
          "description": "Target attribute for the menu link (i.e. set to _blank to open in new tab)",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\""
        },
        {
          "name": "linkTitle",
          "description": "Title attribute\n- Optional title for a11y\n- If a link opens a new window or performs an action, use the title attribute to provide a tooltip with additional information.",
          "type": "string"
        },
        {
          "name": "isHeader",
          "description": "isHeader property\n- **true** Applies the header treatment to the menu item",
          "type": "boolean"
        },
        {
          "name": "isExpandableHeader",
          "description": "isExpandableHeader property\n- **true** Applies expandable functionality to the menu item",
          "type": "boolean"
        },
        {
          "name": "isExpanded",
          "description": "isExpanded property\n- **true** Applies the expanded treatment to a Header item\n- **false** Applies the collapsed treatment to a Header item",
          "type": "boolean"
        },
        {
          "name": "isSelected",
          "description": "Selected attribute\n- Changes the component's treatment to represent a selected state",
          "type": "boolean"
        },
        {
          "name": "isFocused",
          "description": "Current attribute\n- Changes the component's treatment to represent a focused state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isHidden",
          "description": "Is hidden property\n- Is set on child menu items based on their Header's expanded state\n- **true** Hide the item\n- **false** Show the item",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "groupId",
          "description": "Group id property\n- Dynamically set by the Menu parent component\n- Used to associate menu group headers and group items",
          "type": "string"
        },
        {
          "name": "idx",
          "description": "Index property\n- Dynamically set by the Menu parent component\n- Used to track and set focus with keyboard navigation",
          "type": "number"
        },
        {
          "name": "indentation",
          "description": "Indentation\n- Dynamically set by the menu parent component\n- Adds padding to a menu item to left-align its text with that of its Header",
          "type": "number"
        },
        {
          "name": "label",
          "description": "Label attribute\n- Sets the ariaLabel for A11y",
          "type": "string"
        },
        {
          "name": "ariaControls",
          "description": "Aria controls\n- Associates a Expandable Header's control with the items in that group",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-menu-item\""
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "The optional menu link URL",
          "type": "string"
        },
        {
          "name": "target",
          "attribute": "target",
          "description": "Target attribute for the menu link (i.e. set to _blank to open in new tab)",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\""
        },
        {
          "name": "linkTitle",
          "attribute": "linkTitle",
          "description": "Title attribute\n- Optional title for a11y\n- If a link opens a new window or performs an action, use the title attribute to provide a tooltip with additional information.",
          "type": "string"
        },
        {
          "name": "isHeader",
          "attribute": "isHeader",
          "description": "isHeader property\n- **true** Applies the header treatment to the menu item",
          "type": "boolean"
        },
        {
          "name": "isExpandableHeader",
          "attribute": "isExpandableHeader",
          "description": "isExpandableHeader property\n- **true** Applies expandable functionality to the menu item",
          "type": "boolean"
        },
        {
          "name": "isExpanded",
          "attribute": "isExpanded",
          "description": "isExpanded property\n- **true** Applies the expanded treatment to a Header item\n- **false** Applies the collapsed treatment to a Header item",
          "type": "boolean"
        },
        {
          "name": "isSelected",
          "attribute": "isSelected",
          "description": "Selected attribute\n- Changes the component's treatment to represent a selected state",
          "type": "boolean"
        },
        {
          "name": "isFocused",
          "attribute": "isFocused",
          "description": "Current attribute\n- Changes the component's treatment to represent a focused state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isHidden",
          "attribute": "isHidden",
          "description": "Is hidden property\n- Is set on child menu items based on their Header's expanded state\n- **true** Hide the item\n- **false** Show the item",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "groupId",
          "attribute": "groupId",
          "description": "Group id property\n- Dynamically set by the Menu parent component\n- Used to associate menu group headers and group items",
          "type": "string"
        },
        {
          "name": "idx",
          "attribute": "idx",
          "description": "Index property\n- Dynamically set by the Menu parent component\n- Used to track and set focus with keyboard navigation",
          "type": "number"
        },
        {
          "name": "indentation",
          "attribute": "indentation",
          "description": "Indentation\n- Dynamically set by the menu parent component\n- Adds padding to a menu item to left-align its text with that of its Header",
          "type": "number"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Label attribute\n- Sets the ariaLabel for A11y",
          "type": "string"
        },
        {
          "name": "ariaControls",
          "attribute": "ariaControls",
          "description": "Aria controls\n- Associates a Expandable Header's control with the items in that group",
          "type": "string"
        },
        {
          "name": "menuItemLink",
          "description": "Query the SL-LINK element inside the component",
          "type": "SLLink"
        },
        {
          "name": "menuItemControl",
          "description": "Query the SL-BUTTON element inside the component",
          "type": "SLButton"
        },
        {
          "name": "menuItemLinkEl",
          "description": "Query the link element inside the SLLink\n- This will be either an `a` tag or `button`",
          "type": "HTMLAnchorElement | HTMLButtonElement"
        },
        {
          "name": "menuItemControlEl",
          "description": "Query the button element inside the SLButton",
          "type": "HTMLButtonElement"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-menu",
      "path": "./components/menu/menu.ts",
      "description": "Component: sl-menu\n\nMenu displays a list of interactive options on a temporary surface.\n- **slot**: The menu items in the menu\n- **slot** \"trigger\": A button to trigger the active state of the menu",
      "attributes": [
        {
          "name": "variant",
          "description": "Variant\n- **default** Displays the menu items in a panel\n- **cascading** Display the menu items without a panel",
          "type": "\"cascading\""
        },
        {
          "name": "position",
          "description": "Positions the menu panel absolutely to the trigger.\n- **default** places the menu panel to the bottom right of the trigger\n- **bottom-right** places the menu panel to the bottom right of the trigger\n- **bottom-left** places the menu panel to the bottom left of the trigger\n- **top-right** places the menu panel to the top right of the trigger\n- **top-left** places the menu panel to the top left of the trigger\n- **left** places the menu panel to the left of the trigger\n- **right** places the menu panel to the right of the trigger",
          "type": "\"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\" | \"right\" | \"left\"",
          "default": "\"bottom-right\""
        },
        {
          "name": "isActive",
          "description": "Active property\n- **true** Displays the menu on the page\n- **false** Hides the menu on the page",
          "type": "boolean"
        },
        {
          "name": "width",
          "description": "Width property\n- If set, the menu will be constrained to this width in px",
          "type": "number"
        },
        {
          "name": "height",
          "description": "Height property\n- If set, the menu will be constrained to this height in px and enable vertical scrolling",
          "type": "number"
        },
        {
          "name": "menuId",
          "description": "Id attribute\n- Unique id used for A11y\n- Associate the menu with the trigger that controls its open/close state",
          "type": "string"
        },
        {
          "name": "label",
          "description": "Label attribute\n- Sets ariaLabel for A11y",
          "type": "string",
          "default": "\"Menu\""
        },
        {
          "name": "indentGroupItems",
          "description": "Indent group items attribute\n**true** - Applies padding to left align the text on group Menu Items with the text of the group Header\n**false** - Does not apply extra padding",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-menu\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant\n- **default** Displays the menu items in a panel\n- **cascading** Display the menu items without a panel",
          "type": "\"cascading\""
        },
        {
          "name": "position",
          "attribute": "position",
          "description": "Positions the menu panel absolutely to the trigger.\n- **default** places the menu panel to the bottom right of the trigger\n- **bottom-right** places the menu panel to the bottom right of the trigger\n- **bottom-left** places the menu panel to the bottom left of the trigger\n- **top-right** places the menu panel to the top right of the trigger\n- **top-left** places the menu panel to the top left of the trigger\n- **left** places the menu panel to the left of the trigger\n- **right** places the menu panel to the right of the trigger",
          "type": "\"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\" | \"right\" | \"left\"",
          "default": "\"bottom-right\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Active property\n- **true** Displays the menu on the page\n- **false** Hides the menu on the page",
          "type": "boolean"
        },
        {
          "name": "width",
          "attribute": "width",
          "description": "Width property\n- If set, the menu will be constrained to this width in px",
          "type": "number"
        },
        {
          "name": "height",
          "attribute": "height",
          "description": "Height property\n- If set, the menu will be constrained to this height in px and enable vertical scrolling",
          "type": "number"
        },
        {
          "name": "menuId",
          "attribute": "menuId",
          "description": "Id attribute\n- Unique id used for A11y\n- Associate the menu with the trigger that controls its open/close state",
          "type": "string"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Label attribute\n- Sets ariaLabel for A11y",
          "type": "string",
          "default": "\"Menu\""
        },
        {
          "name": "indentGroupItems",
          "attribute": "indentGroupItems",
          "description": "Indent group items attribute\n**true** - Applies padding to left align the text on group Menu Items with the text of the group Header\n**false** - Does not apply extra padding",
          "type": "boolean"
        },
        {
          "name": "tabIndex",
          "description": "- Dynamically sets the menu's tab index for keyboard navigation",
          "type": "number",
          "default": "0"
        },
        {
          "name": "hasOverflow",
          "description": "Is set to true when the total height of items in the menu is greater than the menu's height attribute\n- **true** Displays a scrollbar to handle vertical overflow",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "focusedItem",
          "description": "The currently focused item in the menu list",
          "type": "SLMenuItem"
        },
        {
          "name": "selectedItem",
          "description": "The currently selected item in the menu list",
          "type": "SLMenuItem"
        },
        {
          "name": "validItemCount",
          "description": "Keeps track of the number of valid (expanded/visible, not disabled) items in the list\n- Used to control keyboard focus",
          "type": "number",
          "default": "0"
        },
        {
          "name": "firstValidItem",
          "description": "The first valid item in the menu list, used to control keyboard focus",
          "type": "SLMenuItem"
        },
        {
          "name": "handleActiveMenu",
          "description": "Flag that limits method calls to run only once when the menu is first active\n- Is set to false after the methods run once",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "menuItems",
          "description": "Query the menu item components within the menu",
          "type": "SLMenuItem[]"
        },
        {
          "name": "menuList",
          "description": "Query the UL element within the menu",
          "type": "HTMLElement"
        },
        {
          "name": "menuTrigger",
          "description": "Query the button that triggers the opening of the menu",
          "type": "array"
        },
        {
          "name": "menuTriggerButton",
          "description": "Query the trigger inner elements"
        },
        {
          "name": "handleOnClickOutside"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-pagination-item",
      "path": "./components/pagination-item/pagination-item.ts",
      "description": "Component: sl-pagination-item\n\nPagination Item is a singular link used within the pagination component.\n- **slot**: The pagination item's content",
      "attributes": [
        {
          "name": "href",
          "description": "Href for link",
          "type": "string"
        },
        {
          "name": "isDisabled",
          "description": "Disabled state",
          "type": "boolean"
        },
        {
          "name": "isSelected",
          "description": "Selected state",
          "type": "boolean"
        },
        {
          "name": "ariaLabel",
          "description": "Aria label for the link for accessibility",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-pagination-item\""
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Href for link",
          "type": "string"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled state",
          "type": "boolean"
        },
        {
          "name": "isSelected",
          "attribute": "isSelected",
          "description": "Selected state",
          "type": "boolean"
        },
        {
          "name": "ariaLabel",
          "attribute": "ariaLabel",
          "description": "Aria label for the link for accessibility",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-pagination",
      "path": "./components/pagination/pagination.ts",
      "description": "Component: sl-pagination\n\nPagination allows a user to navigate to content that has been split up into pages.\n- **slot** \"label\": If content is slotted, it will override the default pagination label\n- **slot** \"prev\": If content is slotted, it will override the default \"previous\" icon\n- **slot** \"next\": If content is slotted, it will override the default \"next\" icon",
      "attributes": [
        {
          "name": "prevButtonText",
          "description": "Text displayed on the previous button",
          "type": "string"
        },
        {
          "name": "nextButtonText",
          "description": "Text displayed on the next button",
          "type": "string"
        },
        {
          "name": "ariaLabel",
          "description": "Aria label attribute for accessibility\nProvides an accessible name for the navigation element",
          "type": "string"
        },
        {
          "name": "totalRecords",
          "description": "Total number of records\nRepresents the total size of the data set",
          "type": "number"
        },
        {
          "name": "currentItem",
          "description": "Current page number being displayed",
          "type": "number",
          "default": "1"
        },
        {
          "name": "pageSize",
          "description": "Number of records to display per page",
          "type": "number",
          "default": "10"
        },
        {
          "name": "pageSizeOptions",
          "description": "Dropdown options for choosing the number of items displayed per page",
          "type": "number[]",
          "default": "[20,40,60,80,100]"
        },
        {
          "name": "variant",
          "description": "Variant of pagination (e.g., 'small' for a compact view)",
          "type": "\"small\""
        },
        {
          "name": "pageSizeLabel",
          "description": "Label text for the page size dropdown",
          "type": "string",
          "default": "\"Show\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-pagination\""
        },
        {
          "name": "prevButtonText",
          "attribute": "prevButtonText",
          "description": "Text displayed on the previous button",
          "type": "string"
        },
        {
          "name": "nextButtonText",
          "attribute": "nextButtonText",
          "description": "Text displayed on the next button",
          "type": "string"
        },
        {
          "name": "ariaLabel",
          "attribute": "ariaLabel",
          "description": "Aria label attribute for accessibility\nProvides an accessible name for the navigation element",
          "type": "string"
        },
        {
          "name": "totalRecords",
          "attribute": "totalRecords",
          "description": "Total number of records\nRepresents the total size of the data set",
          "type": "number"
        },
        {
          "name": "currentItem",
          "attribute": "currentItem",
          "description": "Current page number being displayed",
          "type": "number",
          "default": "1"
        },
        {
          "name": "pageSize",
          "attribute": "pageSize",
          "description": "Number of records to display per page",
          "type": "number",
          "default": "10"
        },
        {
          "name": "pageSizeOptions",
          "attribute": "pageSizeOptions",
          "description": "Dropdown options for choosing the number of items displayed per page",
          "type": "number[]",
          "default": "[20,40,60,80,100]"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant of pagination (e.g., 'small' for a compact view)",
          "type": "\"small\""
        },
        {
          "name": "pageSizeLabel",
          "attribute": "pageSizeLabel",
          "description": "Label text for the page size dropdown",
          "type": "string",
          "default": "\"Show\""
        },
        {
          "name": "pageItems",
          "description": "Array of page numbers displayed as pagination",
          "type": "string[]",
          "default": "[]"
        },
        {
          "name": "pageItemsRange",
          "description": "Page numbers displayed under ellipsis (...)",
          "type": "string[]",
          "default": "[]"
        },
        {
          "name": "contextualMenus",
          "description": "Query for all contextual menus within the pagination component",
          "type": "SLContextualMenu[]"
        },
        {
          "name": "label",
          "description": "Text displaying the range of page numbers based on the current page",
          "type": "string"
        },
        {
          "name": "handleOnClickPageItem",
          "description": "Handle on click of page item\n1. Checking whether the Item is ellipsis, if , flag is updated\n2. If the item is number, the currentItem is updated",
          "type": "(selectedItem: string | number) => void",
          "default": "\"(selectedItem: string | number) => {\\n    /* 1 */\\n    if (isNaN(selectedItem as any)) {\\n      this.setPageItemRange(selectedItem as string);\\n    } else {\\n      this.currentItem = +selectedItem; /* 2 */\\n      this.setPageItems();\\n      this.eventDispatch();\\n    }\\n  }\""
        },
        {
          "name": "handleOnClickDropdownItem",
          "description": "Dropdown with pageSizeOptions values\n1. The selected item is updated as pageSize\n2. Prevent event while same as previous pageSize value",
          "type": "(option: number) => void",
          "default": "\"(option: number) => {\\n    if (this.pageSize != option) {\\n      this.pageSize = option;\\n      this.currentItem = 1;\\n      this.eventDispatch();\\n    }\\n  }\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-popover",
      "path": "./components/popover/popover.ts",
      "description": "Component: sl-popover\n\nPopover is used to display content on top of other elements, and is positioned around the trigger that opens it.\n- **slot**: The main body of the popover\n- **slot** \"header\": The header of the popover that appears above the main slot\n- **slot** \"footer\": The footer of the popover that appears below the main slot\n- **slot** \"trigger\": The trigger that opens/closes the popover",
      "attributes": [
        {
          "name": "heading",
          "description": "Heading text that appears in the header region",
          "type": "string"
        },
        {
          "name": "position",
          "description": "Positions the dropdown popover absolutely to the trigger.\n- **default** places the popover to the bottom left\n- **bottom-center** places the popover to the bottom center\n- **bottom-right** places the popover to the bottom right\n- **bottom-left** places the popover to the bottom left\n- **top-center** places the popover to the top center\n- **top-right** places the popover to the top right\n- **top-left** places the popover to the top left\n- **left** places the popover to the left\n- **left-top** places the popover to the left top\n- **right** places the popover to the right\n- **right-top** places the popover to the right top",
          "type": "\"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\" | \"right\" | \"bottom-center\" | \"top-center\" | \"left\" | \"left-top\" | \"right-top\"",
          "default": "\"bottom-left\""
        },
        {
          "name": "isActive",
          "description": "Is active?\n- **true** Shows the popover container\n- **false** Hides the popover container",
          "type": "boolean"
        },
        {
          "name": "isDismissible",
          "description": "Is dismissible?\n- **true** Shows the popover close button\n- **false** Hides the popover close button",
          "type": "boolean"
        },
        {
          "name": "ariaLabelledBy",
          "description": "Aria Labelled By attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "transitionDelay",
          "description": "Number of ms of the dialog's open/close css transition delay\n- Used to delay focus trap activation",
          "type": "number",
          "default": "400"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-popover\""
        },
        {
          "name": "heading",
          "attribute": "heading",
          "description": "Heading text that appears in the header region",
          "type": "string"
        },
        {
          "name": "position",
          "attribute": "position",
          "description": "Positions the dropdown popover absolutely to the trigger.\n- **default** places the popover to the bottom left\n- **bottom-center** places the popover to the bottom center\n- **bottom-right** places the popover to the bottom right\n- **bottom-left** places the popover to the bottom left\n- **top-center** places the popover to the top center\n- **top-right** places the popover to the top right\n- **top-left** places the popover to the top left\n- **left** places the popover to the left\n- **left-top** places the popover to the left top\n- **right** places the popover to the right\n- **right-top** places the popover to the right top",
          "type": "\"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\" | \"right\" | \"bottom-center\" | \"top-center\" | \"left\" | \"left-top\" | \"right-top\"",
          "default": "\"bottom-left\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Is active?\n- **true** Shows the popover container\n- **false** Hides the popover container",
          "type": "boolean"
        },
        {
          "name": "isDismissible",
          "attribute": "isDismissible",
          "description": "Is dismissible?\n- **true** Shows the popover close button\n- **false** Hides the popover close button",
          "type": "boolean"
        },
        {
          "name": "ariaLabelledBy",
          "attribute": "ariaLabelledBy",
          "description": "Aria Labelled By attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "transitionDelay",
          "attribute": "transitionDelay",
          "description": "Number of ms of the dialog's open/close css transition delay\n- Used to delay focus trap activation",
          "type": "number",
          "default": "400"
        },
        {
          "name": "popoverHeading",
          "description": "Query the popover heading"
        },
        {
          "name": "closeButton",
          "description": "Query the popover close button"
        },
        {
          "name": "popoverTrigger",
          "description": "Query the popover trigger",
          "type": "array"
        },
        {
          "name": "popoverTriggerButton",
          "description": "Query the popover trigger inner element"
        },
        {
          "name": "handleOnClickOutside"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-progress",
      "path": "./components/progress/progress.ts",
      "description": "Component: sl-progress\n\nProgress provides feedback about the duration and progression of a process to indicate how long a user will be waiting.",
      "attributes": [
        {
          "name": "isCircle",
          "description": "Is circle?\n- **true** Displays a circular progress indicator\n- **false** Displays a linear progress indicator",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "circleSize",
          "description": "Circle size property\n- Sets the width of the circular progress indicator\n- **default** 16px\n- **md** 24px\n- **lg** 32px\n- **xl** 40px",
          "type": "\"lg\" | \"md\" | \"xl\""
        },
        {
          "name": "showLabel",
          "description": "Show label?\n**true** Displays the progress label\n**false** Does not display a progress label",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "labelType",
          "description": "Label type\n**default** Sets the progress label as a percentage\n**ratio** Sets the progress label as a ratio",
          "type": "\"ratio\""
        },
        {
          "name": "duration",
          "description": "Duration of the progress in seconds\n- Default is 0",
          "type": "number",
          "default": "0"
        },
        {
          "name": "currentProgress",
          "description": "The current completed value of the progress\n- Default is 0",
          "type": "number",
          "default": "0"
        },
        {
          "name": "endProgress",
          "description": "The value at which the progress will end\n- Default is 100",
          "type": "number",
          "default": "100"
        },
        {
          "name": "labelAria",
          "description": "Aria label for A11y\n- Default is \"progress\"",
          "type": "string",
          "default": "\"progress\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-progress\""
        },
        {
          "name": "isCircle",
          "attribute": "isCircle",
          "description": "Is circle?\n- **true** Displays a circular progress indicator\n- **false** Displays a linear progress indicator",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "circleSize",
          "attribute": "circleSize",
          "description": "Circle size property\n- Sets the width of the circular progress indicator\n- **default** 16px\n- **md** 24px\n- **lg** 32px\n- **xl** 40px",
          "type": "\"lg\" | \"md\" | \"xl\""
        },
        {
          "name": "showLabel",
          "attribute": "showLabel",
          "description": "Show label?\n**true** Displays the progress label\n**false** Does not display a progress label",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "labelType",
          "attribute": "labelType",
          "description": "Label type\n**default** Sets the progress label as a percentage\n**ratio** Sets the progress label as a ratio",
          "type": "\"ratio\""
        },
        {
          "name": "duration",
          "attribute": "duration",
          "description": "Duration of the progress in seconds\n- Default is 0",
          "type": "number",
          "default": "0"
        },
        {
          "name": "currentProgress",
          "attribute": "currentProgress",
          "description": "The current completed value of the progress\n- Default is 0",
          "type": "number",
          "default": "0"
        },
        {
          "name": "endProgress",
          "attribute": "endProgress",
          "description": "The value at which the progress will end\n- Default is 100",
          "type": "number",
          "default": "100"
        },
        {
          "name": "labelAria",
          "attribute": "labelAria",
          "description": "Aria label for A11y\n- Default is \"progress\"",
          "type": "string",
          "default": "\"progress\""
        },
        {
          "name": "animateFillDuration"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-radio-item",
      "path": "./components/radio-item/radio-item.ts",
      "description": "Component: sl-radio-item\n\nRadio Item is a singular radio button within the radio component.\n- **slot**: The component content that appears next to the radio\n- **slot** \"field-note\": If content is slotted, it will display in place of the fieldNote property\n- **slot** \"error\": If content is slotted, it will display in place of the errorNote property",
      "attributes": [
        {
          "name": "isChecked",
          "description": "Checked attribute",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Error state\n- Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isRequired",
          "description": "Required attribute\n- Sets the radio to be required for validation",
          "type": "boolean"
        },
        {
          "name": "name",
          "description": "Name attribute",
          "type": "string"
        },
        {
          "name": "value",
          "description": "Value attribute",
          "type": "string"
        },
        {
          "name": "hideLabel",
          "description": "Hide label?\n- If true, hides the label from displaying",
          "type": "boolean"
        },
        {
          "name": "errorNote",
          "description": "Error message\n- An error field note that displays below the radio input",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "Field note\n- The helper text that displays below the radio input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "description": "Id attribute\n- The ID used for A11y and to associate the label with the input",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "aria-describedby attribute\n- Applied to the field note or error note for A11y",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-radio-item\""
        },
        {
          "name": "isChecked",
          "attribute": "isChecked",
          "description": "Checked attribute",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state\n- Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isRequired",
          "attribute": "isRequired",
          "description": "Required attribute\n- Sets the radio to be required for validation",
          "type": "boolean"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Name attribute",
          "type": "string"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "Value attribute",
          "type": "string"
        },
        {
          "name": "hideLabel",
          "attribute": "hideLabel",
          "description": "Hide label?\n- If true, hides the label from displaying",
          "type": "boolean"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "Error message\n- An error field note that displays below the radio input",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Field note\n- The helper text that displays below the radio input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "Id attribute\n- The ID used for A11y and to associate the label with the input",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "aria-describedby attribute\n- Applied to the field note or error note for A11y",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-radio",
      "path": "./components/radio/radio.ts",
      "description": "Component: sl-radio\n\nRadio allows users to choose one option from a set of mutually exclusive options.\n- **slot**: The radio content, a set of radio items\n- **slot** \"field-note\": If content is slotted, it will display in place of the fieldNote property\n- **slot** \"error\": If content is slotted, it will display in place of the errorNote property",
      "attributes": [
        {
          "name": "isError",
          "description": "Error state\n- Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isRequired",
          "description": "Required attribute\n- Sets the radio to be required for validation",
          "type": "boolean"
        },
        {
          "name": "hideLegend",
          "description": "Hide legend?\n- If true, hides the legend from displaying",
          "type": "boolean"
        },
        {
          "name": "label",
          "description": "Label\n- Displays inside the legend",
          "type": "string"
        },
        {
          "name": "errorNote",
          "description": "Error message\n- An error field note that displays below the radio input",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "Field note\n- The helper text that displays below the radio input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "description": "Id attribute\n- The ID used for A11y and to associate the label with the input",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "aria-describedby attribute\n- Applied to the field note or error note for A11y",
          "type": "string"
        },
        {
          "name": "variant",
          "description": "Variant\n- **default** Displays the radio items in a column\n- **horizontal** Displays the radio items in a row",
          "type": "\"horizontal\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-radio\""
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state\n- Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isRequired",
          "attribute": "isRequired",
          "description": "Required attribute\n- Sets the radio to be required for validation",
          "type": "boolean"
        },
        {
          "name": "hideLegend",
          "attribute": "hideLegend",
          "description": "Hide legend?\n- If true, hides the legend from displaying",
          "type": "boolean"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Label\n- Displays inside the legend",
          "type": "string"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "Error message\n- An error field note that displays below the radio input",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Field note\n- The helper text that displays below the radio input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "Id attribute\n- The ID used for A11y and to associate the label with the input",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "aria-describedby attribute\n- Applied to the field note or error note for A11y",
          "type": "string"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant\n- **default** Displays the radio items in a column\n- **horizontal** Displays the radio items in a row",
          "type": "\"horizontal\""
        },
        {
          "name": "checkedItem",
          "description": "The currently checked radio in the radio list",
          "type": "SLRadioItem"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-search-form",
      "path": "./components/search-form/search-form.ts",
      "description": "Component: sl-search-form\n\nSearch Form enables users to specify a word or phrase to find relevant content without navigation.\n- **slot**: The search form's dropdown content\n- **slot** \"field-note\": If content is slotted, it will display in place of the fieldNote property\n- **slot** \"error\": If content is slotted, it will display in place of the errorNote property",
      "attributes": [
        {
          "name": "ariaControlsId",
          "description": "The unique id of the field",
          "type": "string"
        },
        {
          "name": "fieldId",
          "description": "The unique id of the field",
          "type": "string"
        },
        {
          "name": "label",
          "description": "Label of the form field",
          "type": "string",
          "default": "\"Search\""
        },
        {
          "name": "fieldNote",
          "description": "Description for the field",
          "type": "string"
        },
        {
          "name": "errorNote",
          "description": "Error message for the field",
          "type": "string"
        },
        {
          "name": "hideLabel",
          "description": "Visually hide the label from the UI",
          "type": "boolean"
        },
        {
          "name": "buttonText",
          "description": "Search button text",
          "type": "string"
        },
        {
          "name": "clearButtonText",
          "description": "Clear button text",
          "type": "string",
          "default": "\"Clear text\""
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "isActive",
          "description": "Active state",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "isActiveDropdown",
          "description": "Active state",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "isError",
          "description": "Error state",
          "type": "boolean"
        },
        {
          "name": "placeholder",
          "description": "Placeholder text",
          "type": "string",
          "default": "\"Find asset\""
        },
        {
          "name": "value",
          "description": "Input value",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Aria describedby\n1. Used to connect the field note and errorNote for accessibility",
          "type": "string"
        },
        {
          "name": "isDynamic",
          "description": "is Dynamic",
          "type": "boolean"
        },
        {
          "name": "position",
          "description": "Position property",
          "type": "\"bottom\" | \"top\"",
          "default": "\"bottom\""
        },
        {
          "name": "maxlength",
          "description": "Maxlength of characters for the search form",
          "type": "number"
        },
        {
          "name": "isFocusedIn",
          "description": "Focused in menu toggle",
          "type": "boolean"
        },
        {
          "name": "isEmpty",
          "description": "Use this Flag along with emptyMessage named slot to report error message",
          "type": "boolean"
        },
        {
          "name": "ariaActiveDescendantId",
          "description": "Active element in the dropdown panel\n1. This is used to read out the active value to the user",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-search-form\""
        },
        {
          "name": "ariaControlsId",
          "attribute": "ariaControlsId",
          "description": "The unique id of the field",
          "type": "string"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The unique id of the field",
          "type": "string"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Label of the form field",
          "type": "string",
          "default": "\"Search\""
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Description for the field",
          "type": "string"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "Error message for the field",
          "type": "string"
        },
        {
          "name": "hideLabel",
          "attribute": "hideLabel",
          "description": "Visually hide the label from the UI",
          "type": "boolean"
        },
        {
          "name": "buttonText",
          "attribute": "buttonText",
          "description": "Search button text",
          "type": "string"
        },
        {
          "name": "clearButtonText",
          "attribute": "clearButtonText",
          "description": "Clear button text",
          "type": "string",
          "default": "\"Clear text\""
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Active state",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "isActiveDropdown",
          "attribute": "isActiveDropdown",
          "description": "Active state",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state",
          "type": "boolean"
        },
        {
          "name": "placeholder",
          "attribute": "placeholder",
          "description": "Placeholder text",
          "type": "string",
          "default": "\"Find asset\""
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "Input value",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Aria describedby\n1. Used to connect the field note and errorNote for accessibility",
          "type": "string"
        },
        {
          "name": "isDynamic",
          "attribute": "isDynamic",
          "description": "is Dynamic",
          "type": "boolean"
        },
        {
          "name": "position",
          "attribute": "position",
          "description": "Position property",
          "type": "\"bottom\" | \"top\"",
          "default": "\"bottom\""
        },
        {
          "name": "maxlength",
          "attribute": "maxlength",
          "description": "Maxlength of characters for the search form",
          "type": "number"
        },
        {
          "name": "isFocusedIn",
          "attribute": "isFocusedIn",
          "description": "Focused in menu toggle",
          "type": "boolean"
        },
        {
          "name": "isEmpty",
          "attribute": "isEmpty",
          "description": "Use this Flag along with emptyMessage named slot to report error message",
          "type": "boolean"
        },
        {
          "name": "currentSelectedItem",
          "description": "Current selected list-item in the dropdown panel",
          "type": "SLListItem"
        },
        {
          "name": "ariaActiveDescendantId",
          "attribute": "ariaActiveDescendantId",
          "description": "Active element in the dropdown panel\n1. This is used to read out the active value to the user",
          "type": "string"
        },
        {
          "name": "listItems",
          "type": "SLListItem[]"
        },
        {
          "name": "handleOnClickOutside"
        },
        {
          "name": "clearSearchForm"
        },
        {
          "name": "onChanged"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-skeleton",
      "path": "./components/skeleton/skeleton.ts",
      "description": "Component: sl-skeleton\n\nSkeleton provides a low fidelity representation of content before it appears in a view. This improves the perceived loading time for users.",
      "attributes": [
        {
          "name": "variant",
          "description": "Variant\n- **default** renders a rectangular skeleton\n- **circle** renders a round skeleton\n- **square** renders a sqaure skeleton",
          "type": "\"circle\" | \"square\""
        },
        {
          "name": "width",
          "description": "The width of the skeleton\n- If no value is entered, it defaults to 100%",
          "type": "number"
        },
        {
          "name": "height",
          "description": "The height of the skeleton\n- If no value is entered, it defaults to auto",
          "type": "number"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-skeleton\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant\n- **default** renders a rectangular skeleton\n- **circle** renders a round skeleton\n- **square** renders a sqaure skeleton",
          "type": "\"circle\" | \"square\""
        },
        {
          "name": "width",
          "attribute": "width",
          "description": "The width of the skeleton\n- If no value is entered, it defaults to 100%",
          "type": "number"
        },
        {
          "name": "height",
          "attribute": "height",
          "description": "The height of the skeleton\n- If no value is entered, it defaults to auto",
          "type": "number"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-slider",
      "path": "./components/slider/slider.ts",
      "description": "Component: sl-slider\n\nSlider provides a visual indication of adjustable content, where the user can increment or decrement the value by moving the handle along a track, or via text input.\n- **slot** \"label\": If content is slotted, it will override the default slider label\n- **slot** \"before\": If content is slotted, it will override the default slider \"min\" label text\n- **slot** \"after\": If content is slotted, it will override the default slider \"max\" label text",
      "attributes": [
        {
          "name": "hideLabel",
          "description": "Hide label?\n- If true, hides the label from displaying",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "handleLabelUnit",
          "description": "Handle label unit attribute",
          "type": "string"
        },
        {
          "name": "min",
          "description": "Min property for slider",
          "type": "number",
          "default": "0"
        },
        {
          "name": "minSelected",
          "description": "Minselected property for range slider",
          "type": "number"
        },
        {
          "name": "max",
          "description": "Max property for slider",
          "type": "number",
          "default": "100"
        },
        {
          "name": "maxSelected",
          "description": "Maxselected property for range slider",
          "type": "number"
        },
        {
          "name": "step",
          "description": "Step for slider",
          "type": "number",
          "default": "1"
        },
        {
          "name": "hasOutput",
          "description": "Shows input value",
          "type": "boolean"
        },
        {
          "name": "value",
          "description": "Input value",
          "type": "number"
        },
        {
          "name": "lowerSliderValue",
          "description": "Input value for lower slider of range slider",
          "type": "number"
        },
        {
          "name": "upperSliderValue",
          "description": "Input value for upper slider of range slider",
          "type": "number"
        },
        {
          "name": "label",
          "description": "Slide Label",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "Field note text",
          "type": "string"
        },
        {
          "name": "errorNote",
          "description": "Error note text",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Aria described by\n- Used to connect the field note in select field to the select menu for accessibility",
          "type": "string"
        },
        {
          "name": "fieldId",
          "description": "The unique id of the field",
          "type": "string"
        },
        {
          "name": "hasTooltip",
          "description": "Displays value label above slider",
          "type": "boolean"
        },
        {
          "name": "behavior",
          "description": "Behavior property for slide",
          "type": "\"range\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-slider\""
        },
        {
          "name": "hideLabel",
          "attribute": "hideLabel",
          "description": "Hide label?\n- If true, hides the label from displaying",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "handleLabelUnit",
          "attribute": "handleLabelUnit",
          "description": "Handle label unit attribute",
          "type": "string"
        },
        {
          "name": "min",
          "attribute": "min",
          "description": "Min property for slider",
          "type": "number",
          "default": "0"
        },
        {
          "name": "minSelected",
          "attribute": "minSelected",
          "description": "Minselected property for range slider",
          "type": "number"
        },
        {
          "name": "max",
          "attribute": "max",
          "description": "Max property for slider",
          "type": "number",
          "default": "100"
        },
        {
          "name": "maxSelected",
          "attribute": "maxSelected",
          "description": "Maxselected property for range slider",
          "type": "number"
        },
        {
          "name": "step",
          "attribute": "step",
          "description": "Step for slider",
          "type": "number",
          "default": "1"
        },
        {
          "name": "hasOutput",
          "attribute": "hasOutput",
          "description": "Shows input value",
          "type": "boolean"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "Input value",
          "type": "number"
        },
        {
          "name": "lowerSliderValue",
          "attribute": "lowerSliderValue",
          "description": "Input value for lower slider of range slider",
          "type": "number"
        },
        {
          "name": "upperSliderValue",
          "attribute": "upperSliderValue",
          "description": "Input value for upper slider of range slider",
          "type": "number"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Slide Label",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Field note text",
          "type": "string"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "Error note text",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Aria described by\n- Used to connect the field note in select field to the select menu for accessibility",
          "type": "string"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The unique id of the field",
          "type": "string"
        },
        {
          "name": "hasTooltip",
          "attribute": "hasTooltip",
          "description": "Displays value label above slider",
          "type": "boolean"
        },
        {
          "name": "behavior",
          "attribute": "behavior",
          "description": "Behavior property for slide",
          "type": "\"range\""
        },
        {
          "name": "defaultSlider",
          "description": "Queries the default slider",
          "type": "HTMLInputElement"
        },
        {
          "name": "lowerSlider",
          "description": "Queries the lower slider/lower input of range slider",
          "type": "HTMLInputElement"
        },
        {
          "name": "upperSlider",
          "description": "Queries the upper slider/upper input of range slider",
          "type": "HTMLInputElement"
        },
        {
          "name": "lowerSliderLabelContainer",
          "description": "Queries the container for the label of the lower slider in the range slider",
          "type": "HTMLElement"
        },
        {
          "name": "upperSliderLabelContainer",
          "description": "Queries the container for the label of the upper slider in the range slider",
          "type": "HTMLElement"
        },
        {
          "name": "rangeColor",
          "description": "Queries the element for the range color in the slider",
          "type": "HTMLElement"
        },
        {
          "name": "defaultLabelWrapper",
          "description": "Queries the wrapper for the tooltip associated with the slider",
          "type": "HTMLElement"
        },
        {
          "name": "result",
          "description": "Represents the result as a string",
          "type": "string"
        },
        {
          "name": "outputValue",
          "description": "Represents the output value as a number",
          "type": "number"
        },
        {
          "name": "outputValueLowerSlider",
          "description": "Represents the output value of the lower slider as a number for a range slider",
          "type": "number"
        },
        {
          "name": "outputValueUpperSlider",
          "description": "Represents the output value of the upper slider as a number for a range slider",
          "type": "number"
        },
        {
          "name": "Value",
          "description": "Set the value",
          "type": "number"
        },
        {
          "name": "updateValue"
        },
        {
          "name": "syncOutFieldToSliderField"
        },
        {
          "name": "syncOutFieldToLowerRange"
        },
        {
          "name": "syncOutFieldToUpperRange"
        },
        {
          "name": "upperSliderOnInput"
        },
        {
          "name": "lowerSliderOnInput"
        },
        {
          "name": "toggleZIndexonLowerSlider"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-stepper-item",
      "path": "./components/stepper-item/stepper-item.ts",
      "description": "Component: sl-stepper-item\n\nStepper Item is a single step within a stepper.\n- **slot**: The label for each stepper item\n- **slot** \"icon\": The icon that displays next to the label\n- **slot** \"description\": The description that displays below the label",
      "attributes": [
        {
          "name": "variant",
          "description": "Variant\n- **default** renders a Stepper item with a horizontal layout\n- **vertical** renders a Stepper item with a vertical layout",
          "type": "\"vertical\""
        },
        {
          "name": "isActive",
          "description": "Is active?\n- A visual representation of a step with an active/current state",
          "type": "boolean"
        },
        {
          "name": "isComplete",
          "description": "Is complete?\n- A visual representation of a step with a completed state",
          "type": "boolean"
        },
        {
          "name": "isLast",
          "description": "Is last?\n- A visual representation of the last step within an SLStepper\n- Dynamically set by the parent",
          "type": "boolean"
        },
        {
          "name": "stepNumber",
          "description": "Step number\n- The number that appears for each step\n- Dynically set by the parent",
          "type": "number",
          "default": "1"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-stepper-item\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant\n- **default** renders a Stepper item with a horizontal layout\n- **vertical** renders a Stepper item with a vertical layout",
          "type": "\"vertical\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Is active?\n- A visual representation of a step with an active/current state",
          "type": "boolean"
        },
        {
          "name": "isComplete",
          "attribute": "isComplete",
          "description": "Is complete?\n- A visual representation of a step with a completed state",
          "type": "boolean"
        },
        {
          "name": "isLast",
          "attribute": "isLast",
          "description": "Is last?\n- A visual representation of the last step within an SLStepper\n- Dynamically set by the parent",
          "type": "boolean"
        },
        {
          "name": "stepNumber",
          "attribute": "stepNumber",
          "description": "Step number\n- The number that appears for each step\n- Dynically set by the parent",
          "type": "number",
          "default": "1"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-stepper",
      "path": "./components/stepper/stepper.ts",
      "description": "Component: sl-stepper\n\nStepper keeps track of a user's progress by indicating where the user is in a multi-step process.\n- **slot**: The stepper content, a set of stepper items",
      "attributes": [
        {
          "name": "variant",
          "description": "Variant\n- **default** renders a Stepper with a horizontal layout\n- **vertical** renders a Stepper with a vertical layout",
          "type": "\"vertical\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-stepper\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant\n- **default** renders a Stepper with a horizontal layout\n- **vertical** renders a Stepper with a vertical layout",
          "type": "\"vertical\""
        },
        {
          "name": "stepperItems",
          "description": "Query the Stepper item components within the Stepper",
          "type": "SLStepperItem[]"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-switch",
      "path": "./components/switch/switch.ts",
      "description": "Component: sl-switch\n\nSwitch is used to toggle the on/off state of a single setting.",
      "attributes": [
        {
          "name": "isChecked",
          "description": "Checked attribute\n- If true, sets the treatment to represent an on state\n- If false, sets the treatment to represent an off state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "fieldId",
          "description": "Field ID\n- Links the label to the switch\n- By default it is autogenerated by nanoid",
          "type": "string"
        },
        {
          "name": "label",
          "description": "Label\n- The text inside the label tag\n- Does not display on the front-end, but is used for A11y",
          "type": "string",
          "default": "\"Switch\""
        },
        {
          "name": "name",
          "description": "Name attribute\n- The name attribute used on the switch",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-switch\""
        },
        {
          "name": "isChecked",
          "attribute": "isChecked",
          "description": "Checked attribute\n- If true, sets the treatment to represent an on state\n- If false, sets the treatment to represent an off state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "Field ID\n- Links the label to the switch\n- By default it is autogenerated by nanoid",
          "type": "string"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Label\n- The text inside the label tag\n- Does not display on the front-end, but is used for A11y",
          "type": "string",
          "default": "\"Switch\""
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Name attribute\n- The name attribute used on the switch",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-tab-panel",
      "path": "./components/tab-panel/tab-panel.ts",
      "description": "Component: sl-tab-panel\n\nTab Panel displays content for a single tab within the tabs component.\n- **slot**: The tab panel content",
      "attributes": [
        {
          "name": "isActive",
          "description": "Active state\n- **true** Renders a tab panel with selected/active state\n- **false** Renders a tab panel without selected/active state",
          "type": "boolean"
        },
        {
          "name": "ariaId",
          "description": "ID used to connect the tab panel to the tab aria-controls",
          "type": "string"
        },
        {
          "name": "ariaLabelledBy",
          "description": "Aria labelledby property\n- Used to connect tab trigger and tab panel for accessibility",
          "type": "string"
        },
        {
          "name": "idx",
          "description": "Index to track tab panel",
          "type": "number",
          "default": "0"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-tab-panel\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Active state\n- **true** Renders a tab panel with selected/active state\n- **false** Renders a tab panel without selected/active state",
          "type": "boolean"
        },
        {
          "name": "ariaId",
          "attribute": "ariaId",
          "description": "ID used to connect the tab panel to the tab aria-controls",
          "type": "string"
        },
        {
          "name": "ariaLabelledBy",
          "attribute": "ariaLabelledBy",
          "description": "Aria labelledby property\n- Used to connect tab trigger and tab panel for accessibility",
          "type": "string"
        },
        {
          "name": "idx",
          "attribute": "idx",
          "description": "Index to track tab panel",
          "type": "number",
          "default": "0"
        },
        {
          "name": "tabPanelEl",
          "description": "Query the tab panel element inside the SLTabPanel",
          "type": "HTMLElement"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-tab",
      "path": "./components/tab/tab.ts",
      "description": "Component: sl-tab\n\nTab is a singular interactive item within the tabs component.\n- **slot**: The tab label",
      "attributes": [
        {
          "name": "isActive",
          "description": "Active state\n- **true** Renders a tab with selected/active state\n- **false** Renders a tab without selected/active state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute\n- **true** Renders a tab with the disabled property and state\n- **false** Renders a tab without the disabled property and state",
          "type": "boolean"
        },
        {
          "name": "ariaId",
          "description": "ID used to connect the tab panel to the tab aria-controls",
          "type": "string"
        },
        {
          "name": "ariaControls",
          "description": "Aria controls attribute\n- Sets to the id used to connect the tab trigger to the tab panel",
          "type": "string"
        },
        {
          "name": "idx",
          "description": "Index to track tab",
          "type": "number",
          "default": "0"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-tab\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Active state\n- **true** Renders a tab with selected/active state\n- **false** Renders a tab without selected/active state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute\n- **true** Renders a tab with the disabled property and state\n- **false** Renders a tab without the disabled property and state",
          "type": "boolean"
        },
        {
          "name": "ariaId",
          "attribute": "ariaId",
          "description": "ID used to connect the tab panel to the tab aria-controls",
          "type": "string"
        },
        {
          "name": "ariaControls",
          "attribute": "ariaControls",
          "description": "Aria controls attribute\n- Sets to the id used to connect the tab trigger to the tab panel",
          "type": "string"
        },
        {
          "name": "idx",
          "attribute": "idx",
          "description": "Index to track tab",
          "type": "number",
          "default": "0"
        },
        {
          "name": "tabEl",
          "description": "Query the tab element inside the SLTab",
          "type": "HTMLButtonElement"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-tabs",
      "path": "./components/tabs/tabs.ts",
      "description": "Component: sl-tabs\n\nTabs organize related content at the same level of hierarchy, and allow navigation between distinct groups of content. \n- **slot**: The tab items for the tabs\n- **slot** \"panel\": The tab panels that correspond to the slotted tab items",
      "attributes": [
        {
          "name": "variant",
          "description": "Tabs variant\n- **default** Tabs are left-aligned, and the width of each tab is defined by the length of its content\n- **stretch** Tabs stretch horizontally to have equal widths, which is calculated by the width of the screen divided by the number of tabs",
          "type": "\"stretch\""
        },
        {
          "name": "activeIndex",
          "description": "Active tab state\n- Sets the initial active tab (e.g. 0 sets the first tab, 1 sets the second tab, etc.)",
          "type": "number"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-tabs\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Tabs variant\n- **default** Tabs are left-aligned, and the width of each tab is defined by the length of its content\n- **stretch** Tabs stretch horizontally to have equal widths, which is calculated by the width of the screen divided by the number of tabs",
          "type": "\"stretch\""
        },
        {
          "name": "activeIndex",
          "attribute": "activeIndex",
          "description": "Active tab state\n- Sets the initial active tab (e.g. 0 sets the first tab, 1 sets the second tab, etc.)",
          "type": "number"
        },
        {
          "name": "activeTab",
          "description": "Active tab state",
          "type": "SLTab"
        },
        {
          "name": "isScrollable",
          "description": "If the tabs lists is overflowing, sets to true",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "tabsList",
          "description": "Query the tabs list container",
          "type": "HTMLElement"
        },
        {
          "name": "tabItems",
          "description": "Query all the SLTab's",
          "type": "SLTab[]"
        },
        {
          "name": "tabPanels",
          "description": "Query all the SLTabPanel's",
          "type": "SLTabPanel[]"
        },
        {
          "name": "handleOnScroll"
        },
        {
          "name": "handleOnResize"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-text-field",
      "path": "./components/text-field/text-field.ts",
      "description": "Component: sl-text-field\n\nText Field allows users to input alphanumeric data when the expected input is short.\n- **slot** \"before\": The content that appears before the text in the input\n- **slot** \"after\": The content that appears after the text in the input\n- **slot** \"field-note\": If content is slotted, it will display in place of the fieldNote property\n- **slot** \"error\": If content is slotted, it will display in place of the errorNote property",
      "attributes": [
        {
          "name": "type",
          "description": "Type variants\n- Specifies the type <input> element to display\n- **text** renders a standar text input\n- **email** renders a text input specifically for an email format\n- **number** renders an input for number values only\n- **password** renders an input for a password input format\n- **url** renders an input for urls only\n- **tel** renders an input for telephone number values only",
          "type": "\"number\" | \"text\" | \"email\" | \"password\" | \"url\" | \"hidden\" | \"tel\"",
          "default": "\"text\""
        },
        {
          "name": "isActive",
          "description": "isActive\n- Dynamically sets to true if the input has a value",
          "type": "boolean"
        },
        {
          "name": "isReadonly",
          "description": "Readonly attribute\n- Specifies that an input field is read-only",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Error state\n- Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isRequired",
          "description": "Required attribute\n- Specifies that an input field must be filled out before submitting the form",
          "type": "boolean"
        },
        {
          "name": "isOptional",
          "description": "Optional state\n- Specifies that a field is optional and adds the text 'optional' to the label",
          "type": "boolean"
        },
        {
          "name": "isFocused",
          "description": "Autofocus attribute\n- When present, it specifies that the text area should automatically get focus when the page loads",
          "type": "boolean"
        },
        {
          "name": "hideLabel",
          "description": "Hide label?\n- If true, hides the label from displaying",
          "type": "boolean"
        },
        {
          "name": "label",
          "description": "Label attribute\n- Specifies what content to enter within the <input> element",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "placeholder",
          "description": "Placeholder attribute\n- Specifies a short hint that describes the expected value of an <input> element",
          "type": "string"
        },
        {
          "name": "name",
          "description": "Name attribute\n- Specifies the name of an <input> element",
          "type": "string"
        },
        {
          "name": "value",
          "description": "Value attribute\n- Specifies the value of an <input> element",
          "type": "string"
        },
        {
          "name": "errorNote",
          "description": "Error message\n- An error field note that displays below the input",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "Field note\n- The helper text that displays below the input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "description": "Id attribute\n- The ID used for A11y and to associate the label with the input",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "aria-describedby attribute\n- Applied to the field note or error note for A11y",
          "type": "string"
        },
        {
          "name": "minLength",
          "description": "Min length\n- Specifies the minimum number of characters required in an <input> element",
          "type": "number"
        },
        {
          "name": "maxLength",
          "description": "Max length\n- Specifies the maximum number of characters required in an <input> element",
          "type": "number"
        },
        {
          "name": "maxLengthValue",
          "description": "Maxlength value\n- Dynamically outputs the number of characters inside the input field",
          "type": "number"
        },
        {
          "name": "min",
          "description": "Minimum value\n- Specifies a minimum value for an <input> element",
          "type": "number"
        },
        {
          "name": "max",
          "description": "Maximum value\n- Specifies a maximum value for an <input> element",
          "type": "number"
        },
        {
          "name": "autoComplete",
          "description": "Autocomplete property\n- Specifies whether an <input> element should have autocomplete enabled",
          "type": "\"on\" | \"off\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-text-field\""
        },
        {
          "name": "type",
          "attribute": "type",
          "description": "Type variants\n- Specifies the type <input> element to display\n- **text** renders a standar text input\n- **email** renders a text input specifically for an email format\n- **number** renders an input for number values only\n- **password** renders an input for a password input format\n- **url** renders an input for urls only\n- **tel** renders an input for telephone number values only",
          "type": "\"number\" | \"text\" | \"email\" | \"password\" | \"url\" | \"hidden\" | \"tel\"",
          "default": "\"text\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "isActive\n- Dynamically sets to true if the input has a value",
          "type": "boolean"
        },
        {
          "name": "isReadonly",
          "attribute": "isReadonly",
          "description": "Readonly attribute\n- Specifies that an input field is read-only",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state\n- Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isRequired",
          "attribute": "isRequired",
          "description": "Required attribute\n- Specifies that an input field must be filled out before submitting the form",
          "type": "boolean"
        },
        {
          "name": "isOptional",
          "attribute": "isOptional",
          "description": "Optional state\n- Specifies that a field is optional and adds the text 'optional' to the label",
          "type": "boolean"
        },
        {
          "name": "isFocused",
          "attribute": "isFocused",
          "description": "Autofocus attribute\n- When present, it specifies that the text area should automatically get focus when the page loads",
          "type": "boolean"
        },
        {
          "name": "hideLabel",
          "attribute": "hideLabel",
          "description": "Hide label?\n- If true, hides the label from displaying",
          "type": "boolean"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Label attribute\n- Specifies what content to enter within the <input> element",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "placeholder",
          "attribute": "placeholder",
          "description": "Placeholder attribute\n- Specifies a short hint that describes the expected value of an <input> element",
          "type": "string"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Name attribute\n- Specifies the name of an <input> element",
          "type": "string"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "Value attribute\n- Specifies the value of an <input> element",
          "type": "string"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "Error message\n- An error field note that displays below the input",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Field note\n- The helper text that displays below the input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "Id attribute\n- The ID used for A11y and to associate the label with the input",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "aria-describedby attribute\n- Applied to the field note or error note for A11y",
          "type": "string"
        },
        {
          "name": "minLength",
          "attribute": "minLength",
          "description": "Min length\n- Specifies the minimum number of characters required in an <input> element",
          "type": "number"
        },
        {
          "name": "maxLength",
          "attribute": "maxLength",
          "description": "Max length\n- Specifies the maximum number of characters required in an <input> element",
          "type": "number"
        },
        {
          "name": "maxLengthValue",
          "attribute": "maxLengthValue",
          "description": "Maxlength value\n- Dynamically outputs the number of characters inside the input field",
          "type": "number"
        },
        {
          "name": "min",
          "attribute": "min",
          "description": "Minimum value\n- Specifies a minimum value for an <input> element",
          "type": "number"
        },
        {
          "name": "max",
          "attribute": "max",
          "description": "Maximum value\n- Specifies a maximum value for an <input> element",
          "type": "number"
        },
        {
          "name": "autoComplete",
          "attribute": "autoComplete",
          "description": "Autocomplete property\n- Specifies whether an <input> element should have autocomplete enabled",
          "type": "\"on\" | \"off\""
        },
        {
          "name": "beforeEl",
          "description": "Queries content before the text field label"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-text-passage",
      "path": "./components/text-passage/text-passage.ts",
      "description": "Component: sl-text-passage\n\nText Passage provides a layout with consistent spacing for any content related items.\n- **slot**: The text passage content",
      "attributes": [
        {
          "name": "maxWidth",
          "description": "Prevents the text passage from expanding full width\n- **sm** Add a max width of --sl-theme-layout-max-width-sm",
          "type": "\"sm\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-text-passage\""
        },
        {
          "name": "maxWidth",
          "attribute": "maxWidth",
          "description": "Prevents the text passage from expanding full width\n- **sm** Add a max width of --sl-theme-layout-max-width-sm",
          "type": "\"sm\""
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-textarea",
      "path": "./components/textarea/textarea.ts",
      "description": "Component: sl-textarea\n\nTextarea allows users to write text for input over multiple rows. Used when the expected user input is long.\n- **slot** \"before\": The content that appears before the text in the input\n- **slot** \"after\": The content that appears after the text in the input\n- **slot** \"field-note\": If content is slotted, it will display in place of the fieldNote property\n- **slot** \"error\": If content is slotted, it will display in place of the errorNote property",
      "attributes": [
        {
          "name": "rows",
          "description": "Rows attribute\n- Specifies the visible number of lines in a text area",
          "type": "number",
          "default": "1"
        },
        {
          "name": "cols",
          "description": "Cols attribute\n- Specifies the visible width of a text area",
          "type": "number"
        },
        {
          "name": "isActive",
          "description": "isActive\n- Dynamically sets to true if the textarea has a value",
          "type": "boolean"
        },
        {
          "name": "isReadonly",
          "description": "Readonly attribute\n- Specifies that an input field is read-only",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Error state\n- Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isRequired",
          "description": "Required attribute\n- Specifies that an input field must be filled out before submitting the form",
          "type": "boolean"
        },
        {
          "name": "isOptional",
          "description": "Optional state\n- Specifies that a field is optional and adds the text 'optional' to the label",
          "type": "boolean"
        },
        {
          "name": "isFocused",
          "description": "Autofocus attribute\n- When present, it specifies that the text area should automatically get focus when the page loads",
          "type": "boolean"
        },
        {
          "name": "hideLabel",
          "description": "Hide label?\n- If true, hides the label from displaying",
          "type": "boolean"
        },
        {
          "name": "label",
          "description": "Label attribute\n- Specifies what content to enter within the <input> element",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "placeholder",
          "description": "Placeholder attribute\n- Specifies a short hint that describes the expected value of an <input> element",
          "type": "string"
        },
        {
          "name": "name",
          "description": "Name attribute\n- Specifies the name of an <input> element",
          "type": "string"
        },
        {
          "name": "value",
          "description": "Value attribute\n- Specifies the value of an <input> element",
          "type": "string"
        },
        {
          "name": "errorNote",
          "description": "Error message\n- An error field note that displays below the input",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "Field note\n- The helper text that displays below the input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "description": "Id attribute\n- The ID used for A11y and to associate the label with the input",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "aria-describedby attribute\n- Applied to the field note or error note for A11y",
          "type": "string"
        },
        {
          "name": "minLength",
          "description": "Min length\n- Specifies the minimum number of characters required in an <input> element",
          "type": "number"
        },
        {
          "name": "maxLength",
          "description": "Max length\n- Specifies the maximum number of characters required in an <input> element",
          "type": "number"
        },
        {
          "name": "maxLengthValue",
          "description": "Maxlength value\n- Dynamically outputs the number of characters inside the input field",
          "type": "number"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-textarea\""
        },
        {
          "name": "rows",
          "attribute": "rows",
          "description": "Rows attribute\n- Specifies the visible number of lines in a text area",
          "type": "number",
          "default": "1"
        },
        {
          "name": "cols",
          "attribute": "cols",
          "description": "Cols attribute\n- Specifies the visible width of a text area",
          "type": "number"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "isActive\n- Dynamically sets to true if the textarea has a value",
          "type": "boolean"
        },
        {
          "name": "isReadonly",
          "attribute": "isReadonly",
          "description": "Readonly attribute\n- Specifies that an input field is read-only",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error state\n- Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute\n- Changes the component's treatment to represent a disabled state",
          "type": "boolean"
        },
        {
          "name": "isRequired",
          "attribute": "isRequired",
          "description": "Required attribute\n- Specifies that an input field must be filled out before submitting the form",
          "type": "boolean"
        },
        {
          "name": "isOptional",
          "attribute": "isOptional",
          "description": "Optional state\n- Specifies that a field is optional and adds the text 'optional' to the label",
          "type": "boolean"
        },
        {
          "name": "isFocused",
          "attribute": "isFocused",
          "description": "Autofocus attribute\n- When present, it specifies that the text area should automatically get focus when the page loads",
          "type": "boolean"
        },
        {
          "name": "hideLabel",
          "attribute": "hideLabel",
          "description": "Hide label?\n- If true, hides the label from displaying",
          "type": "boolean"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Label attribute\n- Specifies what content to enter within the <input> element",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "placeholder",
          "attribute": "placeholder",
          "description": "Placeholder attribute\n- Specifies a short hint that describes the expected value of an <input> element",
          "type": "string"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Name attribute\n- Specifies the name of an <input> element",
          "type": "string"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "Value attribute\n- Specifies the value of an <input> element",
          "type": "string"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "Error message\n- An error field note that displays below the input",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Field note\n- The helper text that displays below the input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "Id attribute\n- The ID used for A11y and to associate the label with the input",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "aria-describedby attribute\n- Applied to the field note or error note for A11y",
          "type": "string"
        },
        {
          "name": "minLength",
          "attribute": "minLength",
          "description": "Min length\n- Specifies the minimum number of characters required in an <input> element",
          "type": "number"
        },
        {
          "name": "maxLength",
          "attribute": "maxLength",
          "description": "Max length\n- Specifies the maximum number of characters required in an <input> element",
          "type": "number"
        },
        {
          "name": "maxLengthValue",
          "attribute": "maxLengthValue",
          "description": "Maxlength value\n- Dynamically outputs the number of characters inside the input field",
          "type": "number"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-time-selector-list",
      "path": "./components/time-selector-list/time-selector-list.ts",
      "description": "Component: sl-time-selector-list\n\nTime Selector List lets a user select a time from a list of options.",
      "attributes": [
        {
          "name": "orientation",
          "description": "Determines the orientation of the time selector ('horizontal' renders items in a row).",
          "type": "\"horizontal\""
        },
        {
          "name": "activeTime",
          "description": "Sets a specific time to be active (24-hour format, e.g., activeTime=\"16:00\" for 4 PM).",
          "type": "string"
        },
        {
          "name": "times",
          "description": "Container for the current times within the month.",
          "type": "{ value: Date; available: boolean; }[]",
          "default": "[]"
        },
        {
          "name": "timeIncrements",
          "description": "Increments in minutes for the time display.",
          "type": "number",
          "default": "30"
        },
        {
          "name": "timeStart",
          "description": "The minimum time displayed between times (24-hour format, e.g., timeStart=${16} for 4 PM).",
          "type": "number"
        },
        {
          "name": "timeEnd",
          "description": "The maximum time displayed between times (24-hour format, e.g., timeEnd=${16} for 4 PM).",
          "type": "number"
        },
        {
          "name": "disabledMinTime",
          "description": "The minimum time to disable for time display (24-hour format, e.g., disabledMinTime=\"16:00\" for 4 PM).",
          "type": "string"
        },
        {
          "name": "disabledMaxTime",
          "description": "The maximum time to disable for time display (24-hour format, e.g., disabledMaxTime=\"16:00\" for 4 PM).",
          "type": "string"
        },
        {
          "name": "resetTime",
          "description": "Sets the active time selector to an inactive state.",
          "type": "boolean"
        },
        {
          "name": "is24HourFormat",
          "description": "Determines whether to use a 24-hour time format.",
          "type": "boolean"
        },
        {
          "name": "timeFormat",
          "description": "Specifies the date format for UI display (e.g., 'h:mm a').",
          "type": "string",
          "default": "\"h:mm a\""
        },
        {
          "name": "timeSelectorLabel",
          "description": "The label for the time selector heading.",
          "type": "string",
          "default": "\"Time\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-time-selector-list\""
        },
        {
          "name": "orientation",
          "attribute": "orientation",
          "description": "Determines the orientation of the time selector ('horizontal' renders items in a row).",
          "type": "\"horizontal\""
        },
        {
          "name": "activeTime",
          "attribute": "activeTime",
          "description": "Sets a specific time to be active (24-hour format, e.g., activeTime=\"16:00\" for 4 PM).",
          "type": "string"
        },
        {
          "name": "times",
          "attribute": "times",
          "description": "Container for the current times within the month.",
          "type": "{ value: Date; available: boolean; }[]",
          "default": "[]"
        },
        {
          "name": "timeIncrements",
          "attribute": "timeIncrements",
          "description": "Increments in minutes for the time display.",
          "type": "number",
          "default": "30"
        },
        {
          "name": "timeStart",
          "attribute": "timeStart",
          "description": "The minimum time displayed between times (24-hour format, e.g., timeStart=${16} for 4 PM).",
          "type": "number"
        },
        {
          "name": "timeEnd",
          "attribute": "timeEnd",
          "description": "The maximum time displayed between times (24-hour format, e.g., timeEnd=${16} for 4 PM).",
          "type": "number"
        },
        {
          "name": "disabledMinTime",
          "attribute": "disabledMinTime",
          "description": "The minimum time to disable for time display (24-hour format, e.g., disabledMinTime=\"16:00\" for 4 PM).",
          "type": "string"
        },
        {
          "name": "disabledMaxTime",
          "attribute": "disabledMaxTime",
          "description": "The maximum time to disable for time display (24-hour format, e.g., disabledMaxTime=\"16:00\" for 4 PM).",
          "type": "string"
        },
        {
          "name": "resetTime",
          "attribute": "resetTime",
          "description": "Sets the active time selector to an inactive state.",
          "type": "boolean"
        },
        {
          "name": "is24HourFormat",
          "attribute": "is24HourFormat",
          "description": "Determines whether to use a 24-hour time format.",
          "type": "boolean"
        },
        {
          "name": "timeFormat",
          "attribute": "timeFormat",
          "description": "Specifies the date format for UI display (e.g., 'h:mm a').",
          "type": "string",
          "default": "\"h:mm a\""
        },
        {
          "name": "timeSelectorLabel",
          "attribute": "timeSelectorLabel",
          "description": "The label for the time selector heading.",
          "type": "string",
          "default": "\"Time\""
        },
        {
          "name": "selectedTime",
          "description": "The currently selected time.",
          "type": "Date"
        },
        {
          "name": "setTimes"
        },
        {
          "name": "handleOnChange"
        },
        {
          "name": "handleOnClick"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-toast-group",
      "path": "./components/toast-group/toast-group.ts",
      "description": "Component: sl-toast-group\n\nToast Group contains one or multiple toasts, and provides positioning and group interactivity.\n- **slot**: One or more individual toast components",
      "attributes": [
        {
          "name": "position",
          "description": "Position property\n- **default** Displays the toast group where ever it's placed on the page\n- **top** Displays the toast group absolutely at the top center of the screen\n- **bottom** Displays the toast group absolutely at the top center of the screen",
          "type": "\"bottom\" | \"top\""
        },
        {
          "name": "isActive",
          "description": "Is active?\n- **true** Displays the toast group on the screen\n- **false** Hides the toast group on the screen",
          "type": "boolean"
        },
        {
          "name": "isGroup",
          "description": "Is a group?\n- **true** Displays the toasts stacked on top of one another\n- **false** Displays the toasts stacked vertically",
          "type": "boolean"
        },
        {
          "name": "hasControls",
          "description": "Has controls?\n- **true** Shows controls to scroll through the active toasts\n- **false** Hides controls to scroll through the active toasts",
          "type": "boolean"
        },
        {
          "name": "autoClose",
          "description": "Auto close?\n- Set whether you want the toast group to auto close. Adjust the autoCloseDelay if you want longer than 3 seconds",
          "type": "boolean"
        },
        {
          "name": "autoCloseDelay",
          "description": "Delay property\n1. Number of seconds to close the toast group when autoClose is enabled\n2. Default amount is 3",
          "type": "number",
          "default": "3"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-toast-group\""
        },
        {
          "name": "position",
          "attribute": "position",
          "description": "Position property\n- **default** Displays the toast group where ever it's placed on the page\n- **top** Displays the toast group absolutely at the top center of the screen\n- **bottom** Displays the toast group absolutely at the top center of the screen",
          "type": "\"bottom\" | \"top\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Is active?\n- **true** Displays the toast group on the screen\n- **false** Hides the toast group on the screen",
          "type": "boolean"
        },
        {
          "name": "isGroup",
          "attribute": "isGroup",
          "description": "Is a group?\n- **true** Displays the toasts stacked on top of one another\n- **false** Displays the toasts stacked vertically",
          "type": "boolean"
        },
        {
          "name": "hasControls",
          "attribute": "hasControls",
          "description": "Has controls?\n- **true** Shows controls to scroll through the active toasts\n- **false** Hides controls to scroll through the active toasts",
          "type": "boolean"
        },
        {
          "name": "autoClose",
          "attribute": "autoClose",
          "description": "Auto close?\n- Set whether you want the toast group to auto close. Adjust the autoCloseDelay if you want longer than 3 seconds",
          "type": "boolean"
        },
        {
          "name": "autoCloseDelay",
          "attribute": "autoCloseDelay",
          "description": "Delay property\n1. Number of seconds to close the toast group when autoClose is enabled\n2. Default amount is 3",
          "type": "number",
          "default": "3"
        },
        {
          "name": "activeToastIdx",
          "description": "activeToastIdx state\n- The index of the toast that is currently active in the toast group",
          "type": "number",
          "default": "0"
        },
        {
          "name": "prevActiveIdx",
          "description": "prevActiveIdx state\n- Tracks the previously active toast to update the group when controls are used",
          "type": "number",
          "default": "0"
        },
        {
          "name": "toastsVisible",
          "description": "Visible toasts\n- Tracks the number of toasts visible",
          "type": "number",
          "default": "0"
        },
        {
          "name": "toastsActive",
          "description": "Active toasts\n- Tracks the number of toasts active",
          "type": "number",
          "default": "0"
        },
        {
          "name": "controlPrev",
          "description": "Query the control prev button",
          "type": "SLButton"
        },
        {
          "name": "controlNext",
          "description": "Query the control next button",
          "type": "SLButton"
        },
        {
          "name": "toastList",
          "description": "Use queryAssignedElements to populate the toastList",
          "type": "SLToast[]"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-toast",
      "path": "./components/toast/toast.ts",
      "description": "Component: sl-toast\n\nToast provides a brief, temporary notification without interrupting a user's task.\n- **slot**: The toast title or primary text\n- **slot** \"actions\": Actions to optionally display in the toast\n- **slot** \"icon\": Slot in an icon to override the default one",
      "attributes": [
        {
          "name": "variant",
          "description": "Variants\n- **default** renders a toast that represents an informative state\n- **success** renders a toast that represents a success state\n- **warning** renders a toast that represents a warning state\n- **danger** renders a toast that represents an danger state",
          "type": "\"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "description",
          "description": "The toast description text",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "isActive",
          "description": "Is active?\n1. Used if the toast is part of a toast group\n2. If true, the toast is the active slide in the toast group",
          "type": "boolean"
        },
        {
          "name": "isDismissible",
          "description": "Is dismissible?\n- **false** If false, the toast will auto close after a delay\n- **true**  If true, this disables auto close and adds the ability for the user close the toast",
          "type": "boolean"
        },
        {
          "name": "hasControls",
          "description": "Has Controls?\n- Dynamically set by the toast group.\n- **true** Shifts over the toast content to fit the controls",
          "type": "boolean"
        },
        {
          "name": "idx",
          "description": "The index of the toast within its parent toast group",
          "type": "number"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-toast\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variants\n- **default** renders a toast that represents an informative state\n- **success** renders a toast that represents a success state\n- **warning** renders a toast that represents a warning state\n- **danger** renders a toast that represents an danger state",
          "type": "\"success\" | \"warning\" | \"danger\""
        },
        {
          "name": "description",
          "attribute": "description",
          "description": "The toast description text",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Is active?\n1. Used if the toast is part of a toast group\n2. If true, the toast is the active slide in the toast group",
          "type": "boolean"
        },
        {
          "name": "isDismissible",
          "attribute": "isDismissible",
          "description": "Is dismissible?\n- **false** If false, the toast will auto close after a delay\n- **true**  If true, this disables auto close and adds the ability for the user close the toast",
          "type": "boolean"
        },
        {
          "name": "hasControls",
          "attribute": "hasControls",
          "description": "Has Controls?\n- Dynamically set by the toast group.\n- **true** Shifts over the toast content to fit the controls",
          "type": "boolean"
        },
        {
          "name": "idx",
          "attribute": "idx",
          "description": "The index of the toast within its parent toast group",
          "type": "number"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-toggle-button-group",
      "path": "./components/toggle-button-group/toggle-button-group.ts",
      "description": "Component: sl-toggle-button-group\n\nToggle Button Group is a grouping of related toggle buttons.\n- **slot**: A set of toggle buttons",
      "attributes": [
        {
          "name": "variant",
          "description": "Variant\n- **default** renders the toggle button group without background styles\n- **background** renders the toggle button group with background styles",
          "type": "\"background\""
        },
        {
          "name": "orientation",
          "description": "Orientation\n- **default** renders the toggle button's in a horizontal row\n- **vertical** renders the toggle button's in a vertical row",
          "type": "\"vertical\""
        },
        {
          "name": "gap",
          "description": "Gap\n- **default** adds no gap between the toggle buttons\n- **sm** adds a 16px gap between the toggle buttons",
          "type": "\"sm\""
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-toggle-button-group\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant\n- **default** renders the toggle button group without background styles\n- **background** renders the toggle button group with background styles",
          "type": "\"background\""
        },
        {
          "name": "orientation",
          "attribute": "orientation",
          "description": "Orientation\n- **default** renders the toggle button's in a horizontal row\n- **vertical** renders the toggle button's in a vertical row",
          "type": "\"vertical\""
        },
        {
          "name": "gap",
          "attribute": "gap",
          "description": "Gap\n- **default** adds no gap between the toggle buttons\n- **sm** adds a 16px gap between the toggle buttons",
          "type": "\"sm\""
        },
        {
          "name": "selectedItem",
          "description": "Selected item\n- The currently selected Toggle Button in the group",
          "type": "SLToggleButton"
        },
        {
          "name": "handleOnClickOutside"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-toggle-button",
      "path": "./components/toggle-button/toggle-button.ts",
      "description": "Component: sl-toggle-button\n\nToggle Button can be used to group related options. \n- **slot**: The content to display in the toggle button",
      "attributes": [
        {
          "name": "variant",
          "description": "Variant\n- **default** renders the toggle button without background styles\n- **background** renders the toggle button with background styles",
          "type": "\"background\""
        },
        {
          "name": "isSelected",
          "description": "Indicates the selected state of the toggle button.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "isSmall",
          "description": "If true, a fixed width will be set on the button.\n- Dynamically set based on the slotted component",
          "type": "boolean"
        },
        {
          "name": "hasToggle",
          "description": "Has toggle?\n- Is dynamically set if the first time slotted is a SLPopover or SLMenu\n- **true** does not toggle the isSelected state\n- **false** toggles the isSelected state",
          "type": "boolean"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-toggle-button\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant\n- **default** renders the toggle button without background styles\n- **background** renders the toggle button with background styles",
          "type": "\"background\""
        },
        {
          "name": "isSelected",
          "attribute": "isSelected",
          "description": "Indicates the selected state of the toggle button.",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "isSmall",
          "attribute": "isSmall",
          "description": "If true, a fixed width will be set on the button.\n- Dynamically set based on the slotted component",
          "type": "boolean"
        },
        {
          "name": "hasToggle",
          "attribute": "hasToggle",
          "description": "Has toggle?\n- Is dynamically set if the first time slotted is a SLPopover or SLMenu\n- **true** does not toggle the isSelected state\n- **false** toggles the isSelected state",
          "type": "boolean"
        },
        {
          "name": "toggleButton",
          "description": "Query the toggle button",
          "type": "HTMLElement"
        },
        {
          "name": "toggleButtonContent",
          "description": "Query the toggle button content",
          "type": "HTMLElement"
        },
        {
          "name": "slottedEls",
          "description": "Query the slotted elements",
          "type": "array"
        },
        {
          "name": "hasPopover",
          "description": "Check if toggle button has a popover and set property",
          "type": "boolean"
        },
        {
          "name": "handleOnClickOutside"
        },
        {
          "name": "deselectToggleButton"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    },
    {
      "name": "sl-tooltip",
      "path": "./components/tooltip/tooltip.ts",
      "description": "Component: sl-tooltip\n\nTooltips display informative text when users hover over, focus on, or tap an element.\n- **slot**: The content that appears inside the tooltip\n- **slot** \"prefix\": The content that appears before the main content\n- **slot** \"trigger\": The trigger that opens the tooltip",
      "attributes": [
        {
          "name": "hasArrow",
          "description": "Displays the arrow on the tooltip container",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "position",
          "description": "Positions the dropdown tooltip absolutely to the trigger.\n- **default** places the tooltip to the top\n- **top** places the tooltip to the top\n- **bottom** places the tooltip to the bottom\n- **left** places the tooltip to the left\n- **right** places the tooltip to the right",
          "type": "\"right\" | \"left\" | \"bottom\" | \"top\"",
          "default": "\"top\""
        },
        {
          "name": "isActive",
          "description": "Is active?\n- **true** Shows the tooltip container\n- **false** Hides the tooltip container",
          "type": "boolean"
        },
        {
          "name": "isDynamic",
          "description": "Is dynamic?\n- **true** Dynamically position the tooltip container based on it's position in the viewport\n- **false** Positions the tooltip container based on the position property",
          "type": "boolean"
        },
        {
          "name": "isInteractive",
          "description": "Is interactive?\n- **true** Tooltip container is visible on click and not hover/focus\n- **false** Tooltip container is visible on hover/focus",
          "type": "boolean"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Aria Described By attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "el",
          "type": "string",
          "default": "\"sl-tooltip\""
        },
        {
          "name": "hasArrow",
          "attribute": "hasArrow",
          "description": "Displays the arrow on the tooltip container",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "position",
          "attribute": "position",
          "description": "Positions the dropdown tooltip absolutely to the trigger.\n- **default** places the tooltip to the top\n- **top** places the tooltip to the top\n- **bottom** places the tooltip to the bottom\n- **left** places the tooltip to the left\n- **right** places the tooltip to the right",
          "type": "\"right\" | \"left\" | \"bottom\" | \"top\"",
          "default": "\"top\""
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Is active?\n- **true** Shows the tooltip container\n- **false** Hides the tooltip container",
          "type": "boolean"
        },
        {
          "name": "isDynamic",
          "attribute": "isDynamic",
          "description": "Is dynamic?\n- **true** Dynamically position the tooltip container based on it's position in the viewport\n- **false** Positions the tooltip container based on the position property",
          "type": "boolean"
        },
        {
          "name": "isInteractive",
          "attribute": "isInteractive",
          "description": "Is interactive?\n- **true** Tooltip container is visible on click and not hover/focus\n- **false** Tooltip container is visible on hover/focus",
          "type": "boolean"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Aria Described By attribute\n- Dynamically set for A11y",
          "type": "string"
        },
        {
          "name": "tooltipContainer",
          "description": "Query the tooltip container",
          "type": "HTMLElement"
        },
        {
          "name": "tooltipTrigger",
          "description": "Query the tooltip trigger",
          "type": "HTMLElement"
        },
        {
          "name": "isRTL",
          "description": "Get the document dir",
          "type": "boolean"
        },
        {
          "name": "handleOnClickOutside"
        },
        {
          "name": "styleModifier",
          "attribute": "styleModifier",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "string"
        }
      ]
    }
  ]
}